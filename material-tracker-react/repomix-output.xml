This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
__mocks__/firebase.js
.firebase/hosting.ZGlzdA.cache
.firebaserc
.github/workflows/ci.yml
.gitignore
.prettierrc.json
babel.config.cjs
eslint.config.js
firebase.json
index.html
jest.config.cjs
package.json
public/vite.svg
README.md
src/App.css
src/App.jsx
src/assets/react.svg
src/components/AddEditMaterialModal.jsx
src/components/AddEditMaterialModal.test.jsx
src/components/Dashboard.jsx
src/components/DatePickerModal.jsx
src/components/Header.jsx
src/components/Header.test.jsx
src/components/ImportCSV.jsx
src/components/ImportCSV.test.jsx
src/components/Loading.jsx
src/components/LogForm.jsx
src/components/LogForm.test.jsx
src/components/Login.jsx
src/components/Login.test.jsx
src/components/LogTable.jsx
src/components/LogTable.test.jsx
src/components/MaterialTable.jsx
src/components/MaterialTable.test.jsx
src/components/Pagination.jsx
src/components/Pagination.test.jsx
src/components/Sidebar.jsx
src/components/StatsCards.jsx
src/context/authContext.jsx
src/context/LayoutContext.jsx
src/context/ThemeContext.jsx
src/data/mir-template.json.json
src/firebase.js
src/index.css
src/layouts/MainLayout.jsx
src/main.jsx
src/pages/LogPage.jsx
src/pages/MaterialListPage.jsx
src/setupTests.js
src/ui/Button.jsx
src/ui/Button.stories.jsx
src/utils/exportToMir.js
tailwind.config.js
vite.config.js
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="__mocks__/firebase.js">
// This file will be used by Jest as a fake version of the real firebase.js
export const db = {};
export const auth = {};
</file>

<file path=".firebase/hosting.ZGlzdA.cache">
vite.svg,1750541927755,699a02e0e68a579f687d364bbbe7633161244f35af068220aee37b1b33dfb3c7
Steve Logo.png,1750541927739,3bfb0bde2112da01a6053f8b3b35bf512eeeb488f58989a2cc4b67e1be58caa1
Inventory.jpg,1750541927739,419098857f54e1c53882395067382d0a470a8704b322b07587842a4f58eb03ef
graphic3.png,1750541927755,94a6d89d84f47305d00403a201cd43a36389c760412bc32e6deff8ef576823d0
graphic2.png,1750541927755,2e512b34db88ed39c52d00eed81ce5e2cfc134e8ce7e38761b2d9afe4b8dc17e
graphic1.png,1750541927739,4f9ebcb3e5cee6bd416f6cd64305fb7b32f89a62190289c522e0fb7b17a77f7f
Background (2).jpg,1750541927666,48ac255e04d9e26bca0ecdfb0f45c811dad88aa42d88989b7ce8923e74a46cec
index.html,1750903634593,c516fc8180124a7062300a23b5595203ce9846d61775086968a1756fc2e3a826
assets/purify.es-CQJ0hv7W.js,1750903634593,95e0bb0121184e7d1da8e29461304d9e2df7093d781ad74995952aa4b775b603
assets/MaterialListPage-C0YsAMse.js,1750903634585,73d1a7953bab2a4fc42a97e0cbaf944e69e2314f370e53de8f38fd0edb7bc3bb
assets/index-CVC6vaVq.css,1750903634540,28e41be84b8daa1e9245d14c25e3636b5b4a1fef92dcc3f680913f6af71f052d
images/renaissance-logo.jpg,1745847536964,1fcb9452a26521e5ba1d6548f217943907a0d68e0b8174b48c5b959d35332d30
images/steve-logo.png,1750541927739,3bfb0bde2112da01a6053f8b3b35bf512eeeb488f58989a2cc4b67e1be58caa1
assets/Pagination-BaAfbKCn.js,1750903634593,17a323077956cd4a8f010905a8bf862809b149aac4d8563c094932797ce9dd92
assets/index.es-BSO68Fvu.js,1750903634593,9a82c9c5c06fbe1364486202274ea31e2ab0af673767ef4058f146a2f706f9ca
assets/html2canvas.esm-CBrSDip1.js,1750903634593,ded7ecd5734581383939d1afccae5caec1522d744916c1a8238850e3728709cb
assets/index-M5oaK7vR.js,1750903634593,30564e6a9b620fb1b78acac3922ae0e73bff3cddae1f302f1434725501288492
images/signature.png,1709225457779,a63d742f7cabdb7c8d47e400822fadf6c180305138b79c6620f4038d0abaee8a
assets/LogPage-DE-Xof7X.js,1750903634645,1dfc1c46ef0306a4bd8348a7bf435f3e31f42a16d0a9992a39b13e9d97a73c12
</file>

<file path=".firebaserc">
{
  "projects": {
    "default": "sitsl-inventory-tracker"
  }
}
</file>

<file path=".github/workflows/ci.yml">
name: Application CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Ignore the local firebase config file
src/firebase-config.local.js
</file>

<file path=".prettierrc.json">
{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "all",
  "printWidth": 80,
  "tabWidth": 2,
  "jsxSingleQuote": false,
  "bracketSpacing": true
}
</file>

<file path="babel.config.cjs">
// MODIFIED: Switched from 'export default' to 'module.exports' for Jest compatibility
module.exports = {
  presets: [
    ['@babel/preset-env', { targets: { node: 'current' } }],
    ['@babel/preset-react', { runtime: 'automatic' }],
  ],
};
</file>

<file path="eslint.config.js">
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import prettierConfig from 'eslint-config-prettier'; // NEW: Import prettier config

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
  prettierConfig, // NEW: Add Prettier config last to override styling rules
];
</file>

<file path="firebase.json">
{
  "hosting": {
    "public": "dist",
    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Material Tracker</title>
    <link href="/src/index.css" rel="stylesheet" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
</file>

<file path="jest.config.cjs">
module.exports = {
  testEnvironment: 'jest-environment-jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.js'],
  transform: {
    '^.+\\.(js|jsx)$': 'babel-jest',
  },
  // MODIFIED: Added moduleNameMapper to globally mock firebase and asset files
  moduleNameMapper: {
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    '../firebase': '<rootDir>/__mocks__/firebase.js',
  },
};
</file>

<file path="package.json">
{
  "name": "material-tracker-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "format": "prettier --write \"**/*.{js,jsx,json,md,css}\"",
    "test": "jest",
    "preview": "vite preview",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  },
  "dependencies": {
    "@headlessui/react": "^2.2.4",
    "clsx": "^2.1.1",
    "dotenv": "^16.5.0",
    "exceljs": "^4.4.0",
    "file-saver": "^2.0.5",
    "firebase": "^11.9.1",
    "jspdf": "^3.0.1",
    "jspdf-autotable": "^5.0.2",
    "lucide-react": "^0.516.0",
    "papaparse": "^5.5.3",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-hot-toast": "^2.5.2",
    "react-router-dom": "^7.6.2"
  },
  "devDependencies": {
    "@babel/preset-env": "^7.24.7",
    "@babel/preset-react": "^7.24.7",
    "@eslint/js": "^9.25.0",
    "@storybook/addon-essentials": "^8.1.11",
    "@storybook/addon-interactions": "^8.1.11",
    "@storybook/addon-links": "^8.1.11",
    "@storybook/blocks": "^8.1.11",
    "@storybook/react": "^8.1.11",
    "@storybook/react-vite": "^8.1.11",
    "@storybook/test": "^8.1.11",
    "@tailwindcss/postcss": "^4.1.10",
    "@tailwindcss/vite": "^4.1.10",
    "@testing-library/jest-dom": "^6.4.6",
    "@testing-library/react": "^16.0.0",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "@vitejs/plugin-react": "^4.5.2",
    "autoprefixer": "^10.4.21",
    "babel-jest": "^29.7.0",
    "eslint": "^9.25.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "eslint-plugin-storybook": "^0.8.0",
    "globals": "^16.0.0",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.5.6",
    "prettier": "^3.3.2",
    "prop-types": "^15.8.1",
    "storybook": "^8.1.11",
    "tailwindcss": "^4.1.10",
    "vite": "^6.3.5"
  }
}
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="README.md">
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/App.jsx">
import React, { lazy, Suspense } from 'react'; // MODIFIED: Import lazy and Suspense
import { Routes, Route } from 'react-router-dom';
import { AuthProvider, useAuth } from './context/authContext';
import { LayoutProvider } from './context/LayoutContext';
import Login from './components/Login';
import MainLayout from './layouts/MainLayout';
import Loading from './components/Loading'; // NEW: Import the loading component

// NEW: Convert static imports to dynamic imports for lazy loading
const MaterialListPage = lazy(() => import('./pages/MaterialListPage'));
const LogPage = lazy(() => import('./pages/LogPage'));

const App = () => {
  return (
    <AuthProvider>
      <LayoutProvider>
        <AppRoutes />
      </LayoutProvider>
    </AuthProvider>
  );
};

const AppRoutes = () => {
  const { currentUser } = useAuth();

  if (!currentUser) {
    return <Login />;
  }

  return (
    // NEW: Wrap Routes in a Suspense component with a loading fallback
    <Suspense fallback={<Loading />}>
      <Routes>
        <Route path="/" element={<MainLayout />}>
          <Route index element={<MaterialListPage />} />
          <Route path="category/:filterValue" element={<MaterialListPage />} />
          <Route path="supplier/:filterValue" element={<MaterialListPage />} />
          <Route
            path="status/surplus"
            element={<MaterialListPage statusFilter="surplus" />}
          />
          <Route
            path="status/deficit"
            element={<MaterialListPage statusFilter="deficit" />}
          />
          <Route
            path="status/exact"
            element={<MaterialListPage statusFilter="exact" />}
          />
          <Route path="delivery-log" element={<LogPage type="delivery" />} />
          <Route path="issuance-log" element={<LogPage type="issuance" />} />
          <Route path="balanced-materials" element={<MaterialListPage />} />
        </Route>
      </Routes>
    </Suspense>
  );
};

export default App;
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/AddEditMaterialModal.jsx">
// src/components/AddEditMaterialModal.jsx
import React, { useState, useEffect, useRef, Fragment } from 'react';
import { useAuth } from '../context/authContext';
import { db } from '../firebase';
import {
  doc,
  updateDoc,
  addDoc,
  collection,
  arrayUnion,
  serverTimestamp,
} from 'firebase/firestore';
import { Combobox, Transition } from '@headlessui/react';
import {
  FileText,
  Tag,
  Hash,
  Plus,
  Check,
  ChevronsUpDown,
  LoaderCircle,
  Info,
  Maximize2,
  Layers,
  X,
} from 'lucide-react';
import clsx from 'clsx';

const AddEditMaterialModal = ({ material, onClose }) => {
  const { currentUser, ADMIN_UID, appMetadata } = useAuth();

  // Form field states
  const [description, setDescription] = useState(material?.description || '');
  const [selectedBoreSize1, setSelectedBoreSize1] = useState(
    material?.boreSize1 || null,
  );
  const [selectedBoreSize2, setSelectedBoreSize2] = useState(
    material?.boreSize2 || null,
  );
  const [expectedQty, setExpectedQty] = useState(material?.expectedQty || 1);
  const [selectedCategory, setSelectedCategory] = useState(
    material?.category || null,
  );
  const [selectedSupplier, setSelectedSupplier] = useState(
    material?.supplier || null,
  );
  const [selectedMaterialGrade, setSelectedMaterialGrade] = useState(
    material?.materialGrade || null,
  );

  const [categoryQuery, setCategoryQuery] = useState('');
  const [supplierQuery, setSupplierQuery] = useState('');
  const [materialGradeQuery, setMaterialGradeQuery] = useState('');
  const [boreSize1Query, setBoreSize1Query] = useState('');
  const [boreSize2Query, setBoreSize2Query] = useState('');

  const [errors, setErrors] = useState({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Use data directly from the context. No local copies needed.
  const categories = appMetadata.categories || [];
  const suppliers = appMetadata.suppliers || [];
  const materialGrades = appMetadata.materialGrades || [];
  const boreSize1Options = appMetadata.boreSize1Options || [];
  const boreSize2Options = appMetadata.boreSize2Options || [];

  const descriptionInputRef = useRef(null);
  useEffect(() => {
    // The only thing needed in this effect now is the focus action.
    setTimeout(() => descriptionInputRef.current?.focus(), 100);
  }, []); // Dependency array can now be empty.

  const filteredCategories = useMemo(() =>
    categoryQuery === ''
      ? categories
      : categories.filter((cat) =>
          cat.toLowerCase().includes(categoryQuery.toLowerCase()),
        ),
  [categories, categoryQuery]);

  const filteredSuppliers = useMemo(() =>
    supplierQuery === ''
      ? suppliers
      : suppliers.filter((sup) =>
          sup.toLowerCase().includes(supplierQuery.toLowerCase()),
        ),
  [suppliers, supplierQuery]);

  const filteredMaterialGrades = useMemo(() =>
    materialGradeQuery === ''
      ? materialGrades
      : materialGrades.filter((grade) =>
          grade.toLowerCase().includes(materialGradeQuery.toLowerCase()),
        ),
  [materialGrades, materialGradeQuery]);

  const filteredBoreSize1 = useMemo(() =>
    boreSize1Query === ''
      ? boreSize1Options
      : boreSize1Options.filter((size) => size.includes(boreSize1Query)),
  [boreSize1Options, boreSize1Query]);

  const filteredBoreSize2 = useMemo(() =>
    boreSize2Query === ''
      ? boreSize2Options
      : boreSize2Options.filter((size) => size.includes(boreSize2Query)),
  [boreSize2Options, boreSize2Query]);

  const handleQtyChange = (amount) => {
    setExpectedQty((prev) => Math.max(0, prev + amount));
  };

  const validateForm = () => {
    const newErrors = {};
    if (!description) newErrors.description = 'Description is required.';
    if (!selectedBoreSize1)
      newErrors.selectedBoreSize1 = 'Bore Size 1 is required.';
    if (!selectedCategory) newErrors.selectedCategory = 'Category is required.';
    if (!selectedSupplier) newErrors.selectedSupplier = 'Supplier is required.';
    if (!selectedMaterialGrade)
      newErrors.selectedMaterialGrade = 'Material Grade is required.';
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const createMaterial = async (data) => {
    const materialsCollectionRef = collection(
      db,
      `materials/${ADMIN_UID}/items`,
    );
    await addDoc(materialsCollectionRef, {
      ...data,
      delivered: 0,
      issued: 0,
      createdAt: serverTimestamp(),
    });
  };

  const updateMaterial = async (data) => {
    const materialRef = doc(db, `materials/${ADMIN_UID}/items`, material.id);
    await updateDoc(materialRef, data);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (currentUser.isViewer || !validateForm()) return;

    setIsSubmitting(true);
    const dataToSave = {
      description,
      category: selectedCategory,
      supplier: selectedSupplier,
      materialGrade: selectedMaterialGrade,
      boreSize1: selectedBoreSize1,
      boreSize2: selectedBoreSize2 || null,
      expectedQty: parseInt(expectedQty, 10),
      updatedAt: serverTimestamp(),
    };

    try {
      if (material) {
        await updateMaterial(dataToSave);
      } else {
        await createMaterial(dataToSave);
      }
      onClose();
    } catch (error) {
      console.error('Error saving material:', error);
      alert('Failed to save material.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAddNewItem = async (type, value) => {
    if (!value || currentUser.isViewer) return;
    const normalizedValue = value.trim();
    const metadataRef = doc(db, 'app_metadata', 'lists');

    const typeMap = {
      category: {
        list: categories,
        setter: setSelectedCategory,
        field: 'categories',
      },
      supplier: {
        list: suppliers,
        setter: setSelectedSupplier,
        field: 'suppliers',
      },
      materialGrade: {
        list: materialGrades,
        setter: setSelectedMaterialGrade,
        field: 'materialGrades',
      },
      boreSize1: {
        list: boreSize1Options,
        setter: setSelectedBoreSize1,
        field: 'boreSize1Options',
      },
      boreSize2: {
        list: boreSize2Options,
        setter: setSelectedBoreSize2,
        field: 'boreSize2Options',
      },
    };

    const config = typeMap[type];
    if (
      config.list
        .map((item) => item.toLowerCase())
        .includes(normalizedValue.toLowerCase())
    ) {
      config.setter(
        config.list.find(
          (item) => item.toLowerCase() === normalizedValue.toLowerCase(),
        ),
      );
      return;
    }

    try {
      await updateDoc(metadataRef, {
        [config.field]: arrayUnion(normalizedValue),
      });
      config.setter(normalizedValue);
    } catch (error) {
      console.error('Failed to add new item:', error);
      alert(`Could not add new ${type}.`);
    }
  };

  return (
    <div
      className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center p-4 z-50"
      onClick={(e) => {
        if (e.target === e.currentTarget) onClose();
      }}
    >
      <div className="relative mx-auto p-8 border w-full max-w-2xl shadow-lg rounded-xl bg-white dark:bg-gray-800">
        <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200 mb-2">
          {material ? 'Edit Material' : 'Add New Material'}
        </h2>
        <p className="text-gray-500 dark:text-gray-400 mb-8">
          Fill out the details below to add an item to the inventory.
        </p>
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
        >
          <X />
        </button>
        <form onSubmit={handleSubmit} noValidate>
          <div className="space-y-6">
            <div className="space-y-4 p-5 bg-slate-50 dark:bg-gray-700 rounded-lg border border-slate-200 dark:border-gray-600">
              <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide">
                Item Details
              </h3>
              <div>
                <label
                  htmlFor="description"
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Description
                </label>
                <div className="relative">
                  <FileText className="absolute left-3 top-4 h-5 w-5 text-gray-400" />
                  <textarea
                    id="description"
                    name="description"
                    ref={descriptionInputRef}
                    rows="3"
                    className={clsx(
                      'w-full rounded-md border py-4 pl-10 pr-4 text-sm shadow-sm transition-colors bg-white dark:bg-gray-700 dark:text-gray-100',
                      errors.description
                        ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
                        : 'border-gray-300 focus:border-blue-500 focus:ring-blue-500 dark:border-gray-600',
                    )}
                    value={description}
                    onChange={(e) => setDescription(e.target.value)}
                    onBlur={() => validateForm()}
                  />
                </div>
                {errors.description && (
                  <p className="mt-1 text-xs text-red-600 flex items-center gap-1">
                    <Info size={14} />
                    {errors.description}
                  </p>
                )}
              </div>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <SearchableDropdown
                  label="Bore Size 1"
                  items={filteredBoreSize1}
                  selectedItem={selectedBoreSize1}
                  setSelectedItem={setSelectedBoreSize1}
                  query={boreSize1Query}
                  setQuery={setBoreSize1Query}
                  onAddNew={(value) => handleAddNewItem('boreSize1', value)}
                  error={errors.selectedBoreSize1}
                  onBlur={() => validateForm()}
                  icon={
                    <Maximize2 className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                  }
                  allowAddNew={true}
                  isRequired={true}
                />
                <SearchableDropdown
                  label="Bore Size 2"
                  items={filteredBoreSize2}
                  selectedItem={selectedBoreSize2}
                  setSelectedItem={setSelectedBoreSize2}
                  query={boreSize2Query}
                  setQuery={setBoreSize2Query}
                  onAddNew={(value) => handleAddNewItem('boreSize2', value)}
                  icon={
                    <Maximize2 className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                  }
                  allowAddNew={true}
                  isRequired={false}
                />
              </div>
              <div>
                <label
                  htmlFor="quantity"
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Expected Quantity
                </label>
                <div className="relative flex items-center">
                  <button
                    type="button"
                    onClick={() => handleQtyChange(-1)}
                    className="h-11 px-3 bg-slate-200 dark:bg-gray-600 text-gray-600 dark:text-gray-200 rounded-l-md hover:bg-slate-300 dark:hover:bg-gray-500 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 z-10"
                  >
                    -
                  </button>
                  <Hash className="absolute left-12 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400 pointer-events-none" />
                  <input
                    type="number"
                    id="quantity"
                    className="w-full h-11 border-y border-gray-300 dark:border-gray-600 text-center pl-10 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 z-10 bg-white dark:bg-gray-700 dark:text-gray-100"
                    value={expectedQty}
                    onChange={(e) =>
                      setExpectedQty(parseInt(e.target.value, 10) || 0)
                    }
                  />
                  <button
                    type="button"
                    onClick={() => handleQtyChange(1)}
                    className="h-11 px-3 bg-slate-200 dark:bg-gray-600 text-gray-600 dark:text-gray-200 rounded-r-md hover:bg-slate-300 dark:hover:bg-gray-500 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 z-10"
                  >
                    +
                  </button>
                </div>
              </div>
            </div>
            <div className="space-y-4 p-5 bg-slate-50 dark:bg-gray-700 rounded-lg border border-slate-200 dark:border-gray-600">
              <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wide">
                Classification
              </h3>
              <SearchableDropdown
                label="Category"
                items={filteredCategories}
                selectedItem={selectedCategory}
                setSelectedItem={setSelectedCategory}
                query={categoryQuery}
                setQuery={setCategoryQuery}
                onAddNew={(value) => handleAddNewItem('category', value)}
                error={errors.selectedCategory}
                onBlur={() => validateForm()}
                icon={
                  <Tag className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                }
              />
              <SearchableDropdown
                label="Supplier"
                items={filteredSuppliers}
                selectedItem={selectedSupplier}
                setSelectedItem={setSelectedSupplier}
                query={supplierQuery}
                setQuery={setSupplierQuery}
                onAddNew={(value) => handleAddNewItem('supplier', value)}
                error={errors.selectedSupplier}
                onBlur={() => validateForm()}
                icon={
                  <Tag className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                }
              />
              <SearchableDropdown
                label="Material Grade"
                items={filteredMaterialGrades}
                selectedItem={selectedMaterialGrade}
                setSelectedItem={setSelectedMaterialGrade}
                query={materialGradeQuery}
                setQuery={setMaterialGradeQuery}
                onAddNew={(value) => handleAddNewItem('materialGrade', value)}
                error={errors.selectedMaterialGrade}
                onBlur={() => validateForm()}
                icon={
                  <Layers className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                }
              />
            </div>
          </div>
          <div className="mt-8 pt-5 border-t border-gray-200 dark:border-gray-700 flex justify-end gap-3">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-3 text-sm font-semibold bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className={clsx(
                'flex items-center justify-center w-full sm:w-auto px-6 py-3 text-sm font-semibold text-white rounded-lg shadow-md transition-all duration-300',
                isSubmitting
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700 transform hover:-translate-y-0.5',
              )}
            >
              {isSubmitting ? (
                <>
                  <LoaderCircle className="animate-spin mr-2 h-4 w-4" />
                  Saving...
                </>
              ) : (
                'Save Material'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

const SearchableDropdown = ({
  label,
  items,
  selectedItem,
  setSelectedItem,
  query,
  setQuery,
  onAddNew,
  error,
  onBlur,
  icon,
  allowAddNew = true,
  isRequired = true,
}) => {
  const [showAddNew, setShowAddNew] = useState(false);
  const [newItem, setNewItem] = useState('');

  const handleAddNewKeyDown = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      onAddNew(newItem);
      setShowAddNew(false);
      setNewItem('');
    }
  };

  return (
    <div>
      <Combobox
        value={selectedItem}
        onChange={(value) => {
          if (allowAddNew && value === 'add_new') {
            setShowAddNew(true);
          } else {
            setShowAddNew(false);
            setSelectedItem(value);
          }
        }}
        nullable
      >
        {({ open }) => (
          <div className="relative">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              {label}{' '}
              {isRequired ? (
                <span className="text-red-500">*</span>
              ) : (
                <span className="text-gray-400 dark:text-gray-500">
                  (Optional)
                </span>
              )}
            </label>
            <div className="relative">
              {icon}
              <Combobox.Input
                className={clsx(
                  'w-full h-11 rounded-md border bg-white dark:bg-gray-700 py-2 pl-10 pr-10 text-sm shadow-sm transition-colors dark:text-gray-100',
                  error
                    ? 'border-red-500'
                    : 'border-gray-300 dark:border-gray-600',
                )}
                displayValue={(item) => item || ''}
                onChange={(event) => setQuery(event.target.value)}
                placeholder={`Select a ${label.toLowerCase()}`}
                onBlur={onBlur}
                autoComplete="off"
              />
              <Combobox.Button className="absolute inset-y-0 right-0 flex items-center pr-2">
                <ChevronsUpDown className="h-5 w-5 text-gray-400" />
              </Combobox.Button>
            </div>
            <Transition
              as={Fragment}
              show={open}
              leave="transition ease-in duration-100"
              leaveFrom="opacity-100"
              leaveTo="opacity-0"
              afterLeave={() => setQuery('')}
            >
              <Combobox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white dark:bg-gray-700 py-1 text-base shadow-lg ring-1 ring-black/5 focus:outline-none sm:text-sm z-20">
                {items.length === 0 && query !== '' ? (
                  <div className="relative cursor-default select-none py-2 px-4 text-gray-700 dark:text-gray-300">
                    Nothing found.
                  </div>
                ) : (
                  items.map((item) => (
                    <Combobox.Option
                      key={item}
                      className={({ active }) =>
                        `relative cursor-default select-none py-2 pl-10 pr-4 ${active ? 'bg-blue-600 text-white' : 'text-gray-900 dark:text-gray-300'}`
                      }
                      value={item}
                    >
                      {({ selected, active }) => (
                        <>
                          <span
                            className={`block truncate ${selected ? 'font-medium' : 'font-normal'}`}
                          >
                            {item}
                          </span>
                          {selected && (
                            <span
                              className={`absolute inset-y-0 left-0 flex items-center pl-3 ${active ? 'text-white' : 'text-blue-600'}`}
                            >
                              <Check className="h-5 w-5" />
                            </span>
                          )}
                        </>
                      )}
                    </Combobox.Option>
                  ))
                )}
                {allowAddNew && (
                  <Combobox.Option
                    className="relative cursor-default select-none py-2 px-4 text-blue-600 font-semibold hover:bg-blue-50 dark:hover:bg-blue-900/20"
                    value="add_new"
                  >
                    + Add New {label}
                  </Combobox.Option>
                )}
              </Combobox.Options>
            </Transition>
          </div>
        )}
      </Combobox>
      {error && (
        <p className="mt-1 text-xs text-red-600 flex items-center gap-1">
          <Info size={14} />
          {error}
        </p>
      )}
      {showAddNew && (
        <div className="relative mt-2">
          <Plus className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
          <input
            type="text"
            value={newItem}
            onChange={(e) => setNewItem(e.target.value)}
            onKeyDown={handleAddNewKeyDown}
            placeholder={`Type new ${label.toLowerCase()} and press Enter`}
            className="w-full h-11 rounded-md border bg-white dark:bg-gray-700 py-2 pl-10 pr-4 text-sm shadow-sm border-blue-500 focus:border-blue-500 focus:ring-blue-500 dark:text-gray-100 dark:border-blue-500 dark:focus:border-blue-500 dark:focus:ring-blue-500"
            autoFocus
          />
        </div>
      )}
    </div>
  );
};

export default AddEditMaterialModal;
</file>

<file path="src/components/AddEditMaterialModal.test.jsx">
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import AddEditMaterialModal from './AddEditMaterialModal';

// Mock the dependencies of the component
jest.mock('../context/authContext', () => ({
  useAuth: () => ({
    currentUser: { isViewer: false, email: 'test@example.com' },
    ADMIN_UID: 'test-admin-uid',
    appMetadata: {
      categories: ['Pipes', 'Valves'],
      suppliers: ['Supplier A', 'Supplier B'],
      materialGrades: ['Grade 1', 'Grade 2'],
      boreSize1Options: ['1"', '2"'],
      boreSize2Options: ['1.5"'],
    },
  }),
}));

// Mock the firebase services used in the component
jest.mock('../firebase', () => ({
  db: jest.fn(),
}));
jest.mock('firebase/firestore', () => ({
  doc: jest.fn(),
  updateDoc: jest.fn(() => Promise.resolve()),
  addDoc: jest.fn(() => Promise.resolve()),
  collection: jest.fn(),
  arrayUnion: jest.fn(),
  serverTimestamp: jest.fn(() => new Date()),
}));

describe('AddEditMaterialModal Component', () => {
  const mockOnClose = jest.fn();

  // Clear mock history before each test
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders in "Add New Material" mode correctly', () => {
    render(<AddEditMaterialModal onClose={mockOnClose} />);

    expect(screen.getByText('Add New Material')).toBeInTheDocument();
    expect(screen.getByLabelText(/Description/i)).toHaveValue('');
    expect(screen.getByLabelText(/Expected Quantity/i)).toHaveValue(1);
  });

  test('renders in "Edit Material" mode and populates fields', () => {
    const mockMaterial = {
      id: '123',
      description: 'Test Pipe',
      expectedQty: 50,
      category: 'Pipes',
      supplier: 'Supplier A',
      materialGrade: 'Grade 1',
      boreSize1: '1"',
    };

    render(<AddEditMaterialModal material={mockMaterial} onClose={mockOnClose} />);

    expect(screen.getByText('Edit Material')).toBeInTheDocument();
    expect(screen.getByLabelText(/Description/i)).toHaveValue('Test Pipe');
    expect(screen.getByLabelText(/Expected Quantity/i)).toHaveValue(50);
    // Test a combobox/dropdown value
    expect(screen.getByDisplayValue('Pipes')).toBeInTheDocument();
  });

  test('shows validation errors for required fields on submit', async () => {
    render(<AddEditMaterialModal onClose={mockOnClose} />);
    
    // Clear default values to trigger validation
    await userEvent.clear(screen.getByLabelText(/Expected Quantity/i));
    
    const saveButton = screen.getByRole('button', { name: /Save Material/i });
    fireEvent.click(saveButton);

    // Use findByText to wait for async validation messages to appear
    expect(await screen.findByText('Description is required.')).toBeInTheDocument();
    expect(await screen.findByText('Bore Size 1 is required.')).toBeInTheDocument();
    expect(await screen.findByText('Category is required.')).toBeInTheDocument();
    expect(await screen.findByText('Supplier is required.')).toBeInTheDocument();
    expect(await screen.findByText('Material Grade is required.')).toBeInTheDocument();
  });
  
  test('allows user to type in the description field', async () => {
    render(<AddEditMaterialModal onClose={mockOnClose} />);
    const descriptionInput = screen.getByLabelText(/Description/i);

    await userEvent.type(descriptionInput, 'A new gate valve');
    
    expect(descriptionInput).toHaveValue('A new gate valve');
  });

});
</file>

<file path="src/components/Dashboard.jsx">
import React from 'react';
import Header from './Header';
import MaterialTable from './MaterialTable';
import { useAuth } from './context/authContext';

const Dashboard = () => {
  const { currentUser } = useAuth(); // Keep useAuth if currentUser is used for logic, not just styling
  return (
    // MODIFIED: Removed viewer-mode class as theme is handled globally
    <div>
      <Header />
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <MaterialTable />
      </main>
    </div>
  );
};

export default Dashboard;
</file>

<file path="src/components/DatePickerModal.jsx">
// src/components/DatePickerModal.jsx
import React, { useState } from 'react';
import { X, Printer } from 'lucide-react';
import toast from 'react-hot-toast';

const DatePickerModal = ({ isOpen, onClose, onExport, availableDates }) => {
  // Set the default date to the most recent available date
  const [selectedDate, setSelectedDate] = useState(availableDates[0] || '');

  if (!isOpen) return null;

  const handleExportClick = () => {
    if (!selectedDate) {
      toast.error('Please select a date to export.');
      return;
    }
    onExport(selectedDate);
  };

  return (
    <div
      className="fixed inset-0 bg-gray-600 bg-opacity-75 h-full w-full flex items-center justify-center p-4 z-50"
      onClick={onClose}
    >
      <div
        className="relative mx-auto p-8 w-full max-w-md shadow-lg rounded-xl bg-white dark:bg-gray-800"
        onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside the modal
      >
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-2xl font-bold text-gray-800 dark:text-white">
            Export MIR by Date
          </h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-white"
          >
            <X />
          </button>
        </div>

        <div className="space-y-4">
          <label
            htmlFor="date-select"
            className="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Select a delivery date to export:
          </label>
          <select
            id="date-select"
            value={selectedDate}
            onChange={(e) => setSelectedDate(e.target.value)}
            className="w-full h-11 px-4 rounded-md border border-gray-300 bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white shadow-sm focus:ring-blue-500 focus:border-blue-500"
          >
            {availableDates.length > 0 ? (
              availableDates.map((date) => (
                <option key={date} value={date}>
                  {new Date(date + 'T00:00:00').toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })}
                </option>
              ))
            ) : (
              <option disabled>No delivery dates found</option>
            )}
          </select>
        </div>

        <div className="mt-8 pt-5 border-t border-gray-200 dark:border-gray-700 flex justify-end gap-3">
          <button
            type="button"
            onClick={onClose}
            className="px-6 py-3 text-sm font-semibold bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500"
          >
            Cancel
          </button>
          <button
            type="button"
            onClick={handleExportClick}
            disabled={!selectedDate}
            className="flex items-center justify-center gap-2 w-auto px-6 py-3 text-sm font-semibold text-white bg-blue-600 rounded-lg shadow-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <Printer size={16} />
            Export
          </button>
        </div>
      </div>
    </div>
  );
};

export default DatePickerModal;
</file>

<file path="src/components/Header.jsx">
import React from 'react';
import { useAuth } from '../context/authContext';
import { useTheme } from '../context/ThemeContext';
import { signOut } from 'firebase/auth';
import { auth } from '../firebase';
import { LogOut, Sun, Moon, Monitor } from 'lucide-react'; // Import all necessary icons

const Header = () => {
  const { currentUser } = useAuth();
  const { theme, toggleTheme } = useTheme();

  const handleSignOut = () => signOut(auth);

  // Determine which icon to show based on the current theme
  const getNextThemeAndIcon = () => {
    if (theme === 'light') {
      return {
        nextTheme: 'dark',
        icon: <Moon size={20} />,
        title: 'Switch to Dark Mode',
      };
    }
    if (theme === 'dark') {
      return {
        nextTheme: 'system',
        icon: <Monitor size={20} />,
        title: 'Switch to System Preference',
      };
    }
    // If theme is 'system' or anything else, default to light
    return {
      nextTheme: 'light',
      icon: <Sun size={20} />,
      title: 'Switch to Light Mode',
    };
  };

  const {
    nextTheme,
    icon: currentIcon,
    title: iconTitle,
  } = getNextThemeAndIcon();

  const handleThemeToggleClick = () => {
    toggleTheme(nextTheme);
  };

  return (
    <header className="bg-white dark:bg-gray-800 shadow-md h-20 flex items-center justify-between px-6 flex-shrink-0">
      <h1 className="text-lg md:text-xl font-bold text-gray-800 dark:text-gray-200">
        GBARAN GBCD MATERIAL PROCUREMENT TRACKER
      </h1>
      <div className="flex items-center space-x-4">
        {/* MODIFIED: Single dynamic theme toggle button */}
        <button
          onClick={handleThemeToggleClick}
          className="p-2 rounded-full text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700"
          title={iconTitle}
        >
          {currentIcon}
        </button>
        <div className="text-right hidden sm:block">
          <p
            className="text-sm font-medium text-gray-800 dark:text-gray-200"
            title={currentUser?.email}
          >
            {currentUser?.email}
          </p>
        </div>
        <button
          onClick={handleSignOut}
          className="p-2 rounded-full text-red-500 hover:bg-red-100 dark:hover:bg-red-900/20"
          title="Sign Out"
        >
          <LogOut size={20} />
        </button>
      </div>
    </header>
  );
};

export default Header;
</file>

<file path="src/components/Header.test.jsx">
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import Header from './Header';
import { useAuth } from '../context/authContext';
import { useTheme } from '../context/ThemeContext';
import { signOut } from 'firebase/auth';

// --- Mocks ---
jest.mock('../context/authContext');
jest.mock('../context/ThemeContext');
jest.mock('firebase/auth', () => ({
  ...jest.requireActual('firebase/auth'), // keep other exports
  signOut: jest.fn(() => Promise.resolve()),
}));

describe('Header Component', () => {
  // Create a mock function for toggling the theme
  const mockToggleTheme = jest.fn();

  beforeEach(() => {
    // Reset mocks before each test
    jest.clearAllMocks();
    
    // Default mock setup for useAuth
    useAuth.mockReturnValue({
      currentUser: { email: 'stakeholder@project.com' },
    });
    
    // Default mock setup for useTheme
    useTheme.mockReturnValue({
      theme: 'light',
      toggleTheme: mockToggleTheme,
    });
  });

  test('renders the header with user email', () => {
    render(<Header />);
    expect(screen.getByText('GBARAN GBCD MATERIAL PROCUREMENT TRACKER')).toBeInTheDocument();
    expect(screen.getByText('stakeholder@project.com')).toBeInTheDocument();
  });

  test('calls signOut when the logout button is clicked', async () => {
    render(<Header />);
    const logoutButton = screen.getByTitle(/Sign Out/i);
    await userEvent.click(logoutButton);
    expect(signOut).toHaveBeenCalledTimes(1);
  });

  test('shows dark mode button and calls toggleTheme with "dark" when in light mode', async () => {
    render(<Header />);
    // The button to switch TO dark mode is present
    const themeButton = screen.getByTitle(/Switch to Dark Mode/i);
    await userEvent.click(themeButton);
    expect(mockToggleTheme).toHaveBeenCalledWith('dark');
  });

  test('shows system mode button and calls toggleTheme with "system" when in dark mode', async () => {
    // Override the theme context for this specific test
    useTheme.mockReturnValue({
      theme: 'dark',
      toggleTheme: mockToggleTheme,
    });
    render(<Header />);
    const themeButton = screen.getByTitle(/Switch to System Preference/i);
    await userEvent.click(themeButton);
    expect(mockToggleTheme).toHaveBeenCalledWith('system');
  });

  test('shows light mode button and calls toggleTheme with "light" when in system mode', async () => {
    // Override the theme context for this specific test
    useTheme.mockReturnValue({
      theme: 'system',
      toggleTheme: mockToggleTheme,
    });
    render(<Header />);
    const themeButton = screen.getByTitle(/Switch to Light Mode/i);
    await userEvent.click(themeButton);
    expect(mockToggleTheme).toHaveBeenCalledWith('light');
  });
});
</file>

<file path="src/components/ImportCSV.jsx">
import React, { useState, useRef } from 'react';
import { useAuth } from '../context/authContext';
import { db } from '../firebase';
import { collection, doc, writeBatch, arrayUnion, serverTimestamp } from 'firebase/firestore';
import Papa from 'papaparse';
import toast from 'react-hot-toast';
import { Upload, LoaderCircle } from 'lucide-react';
import clsx from 'clsx';

const ImportCSV = () => {
  const { currentUser, ADMIN_UID } = useAuth();
  const [isImporting, setIsImporting] = useState(false);
  const fileInputRef = useRef(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    // Reset the input value immediately to allow re-selection of the same file
    if (event.target) {
      event.target.value = null;
    }
    if (!file) return;

    setIsImporting(true);
    const toastId = toast.loading('Parsing CSV file...');

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: (results) => {
        processAndUpload(results.data, toastId);
      },
      error: (error) => {
        toast.error(`Error parsing file: ${error.message}`, { id: toastId });
        setIsImporting(false);
      },
    });

    // MODIFIED: This line is removed as it causes issues in the test environment.
    // event.target.value = null;
  };

  const processAndUpload = async (data, toastId) => {
    toast.loading('Preparing data for upload...', { id: toastId });

    if (data.length === 0) {
      toast.error('CSV file is empty or has no data rows.', { id: toastId });
      setIsImporting(false);
      return;
    }

    const requiredHeaders = ['Description', 'ExpectedQuantity', 'Category', 'Supplier', 'MaterialGrade', 'BoreSize1'];
    const fileHeaders = Object.keys(data[0]);
    const missingHeaders = requiredHeaders.filter(h => !fileHeaders.includes(h));

    if (missingHeaders.length > 0) {
      toast.error(`Missing required columns: ${missingHeaders.join(', ')}`, { id: toastId });
      setIsImporting(false);
      return;
    }

    try {
      const materialsCollectionRef = collection(db, `materials/${ADMIN_UID}/items`);
      const metadataRef = doc(db, 'app_metadata', 'lists');
      const newMetadata = {
        categories: new Set(),
        suppliers: new Set(),
        materialGrades: new Set(),
        boreSize1Options: new Set(),
        boreSize2Options: new Set(),
      };

      data.forEach(row => {
        if (row.Category) newMetadata.categories.add(row.Category);
        if (row.Supplier) newMetadata.suppliers.add(row.Supplier);
        if (row.MaterialGrade) newMetadata.materialGrades.add(row.MaterialGrade);
        if (row.BoreSize1) newMetadata.boreSize1Options.add(row.BoreSize1);
        if (row.BoreSize2) newMetadata.boreSize2Options.add(row.BoreSize2);
      });

      const metadataBatch = writeBatch(db);
      metadataBatch.update(metadataRef, {
        categories: arrayUnion(...Array.from(newMetadata.categories)),
        suppliers: arrayUnion(...Array.from(newMetadata.suppliers)),
        materialGrades: arrayUnion(...Array.from(newMetadata.materialGrades)),
        boreSize1Options: arrayUnion(...Array.from(newMetadata.boreSize1Options)),
        boreSize2Options: arrayUnion(...Array.from(newMetadata.boreSize2Options)),
      });
      await metadataBatch.commit();
      
      toast.loading('Metadata updated. Now uploading materials...', { id: toastId });

      const BATCH_SIZE = 499;
      const batchPromises = [];
      for (let i = 0; i < data.length; i += BATCH_SIZE) {
        const chunk = data.slice(i, i + BATCH_SIZE);
        const batch = writeBatch(db);

        chunk.forEach(row => {
          const newMaterialRef = doc(materialsCollectionRef);
          const materialData = {
            description: row.Description || '',
            expectedQty: Number(row.ExpectedQuantity) || 0,
            category: row.Category || '',
            supplier: row.Supplier || '',
            materialGrade: row.MaterialGrade || '',
            boreSize1: row.BoreSize1 || '',
            boreSize2: row.BoreSize2 || null,
            delivered: 0,
            issued: 0,
            createdAt: serverTimestamp(),
            updatedAt: serverTimestamp(),
          };
          batch.set(newMaterialRef, materialData);
        });
        
        batchPromises.push(batch.commit());
      }

      await Promise.all(batchPromises);

      toast.success(`Successfully imported ${data.length} materials!`, { id: toastId });

    } catch (error) {
      console.error('Import failed: ', error);
      toast.error(`Import failed: ${error.message}`, { id: toastId });
    } finally {
      setIsImporting(false);
    }
  };

  if (currentUser.isViewer) return null;

  return (
    <>
      <input
        type="file"
        ref={fileInputRef}
        className="hidden"
        accept=".csv"
        onChange={handleFileChange}
        data-testid="csv-input"
      />
      <button
        onClick={() => fileInputRef.current.click()}
        disabled={isImporting}
        className={clsx(
            "bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 flex items-center space-x-2 transition-colors",
            isImporting && "bg-gray-400 cursor-not-allowed"
        )}
      >
        {isImporting ? (
            <LoaderCircle className="animate-spin h-5 w-5" />
        ) : (
            <Upload className="h-5 w-5" />
        )}
        <span>Import CSV</span>
      </button>
    </>
  );
};

export default ImportCSV;
</file>

<file path="src/components/ImportCSV.test.jsx">
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import ImportCSV from './ImportCSV';
import Papa from 'papaparse';
import { writeBatch } from 'firebase/firestore';
import toast from 'react-hot-toast';

// --- Mocks ---
jest.mock('papaparse');
jest.mock('react-hot-toast');

jest.mock('../context/authContext', () => ({
  useAuth: () => ({
    currentUser: { isViewer: false },
    ADMIN_UID: 'test-admin-uid',
  }),
}));

const mockCommit = jest.fn(() => Promise.resolve());
const mockBatch = {
  update: jest.fn(),
  set: jest.fn(),
  commit: mockCommit,
};
jest.mock('firebase/firestore', () => ({
  writeBatch: jest.fn(() => mockBatch),
  doc: jest.fn(),
  collection: jest.fn(),
  arrayUnion: jest.fn(),
  serverTimestamp: jest.fn(),
}));

const fireFileUpload = async (file, mockData, parseError = null) => {
  Papa.parse.mockImplementation((_file, config) => {
    if (parseError) {
      config.error(parseError);
    } else {
      config.complete({ data: mockData });
    }
  });

  const fileInput = screen.getByTestId('csv-input');
  await userEvent.upload(fileInput, file);
};

describe('ImportCSV Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('does not render the button for viewer users', () => {
    jest.spyOn(require('../context/authContext'), 'useAuth').mockReturnValueOnce({
      currentUser: { isViewer: true }
    });
    const { container } = render(<ImportCSV />);
    expect(container).toBeEmptyDOMElement();
  });

  test('shows an error toast if the CSV is missing required headers', async () => {
    render(<ImportCSV />);
    const file = new File(['bad,data\n1,2'], 'test.csv', { type: 'text/csv' });
    const badData = [{ bad: '1', data: '2' }];

    await fireFileUpload(file, badData);

    await waitFor(() => {
      // FIX: Expect the full, correct error message
      const expectedError = 'Missing required columns: Description, ExpectedQuantity, Category, Supplier, MaterialGrade, BoreSize1';
      expect(toast.error).toHaveBeenCalledWith(expectedError, expect.any(Object));
    });
  });

  test('handles a successful import of a small CSV file', async () => {
    render(<ImportCSV />);
    const file = new File(['...'], 'test.csv', { type: 'text/csv' });
    const mockCSVData = [{ Description: 'Test', ExpectedQuantity: '10', Category: 'Pipes', Supplier: 'SupA', MaterialGrade: 'G1', BoreSize1: '1"' }];

    await fireFileUpload(file, mockCSVData);

    await waitFor(() => {
      // FIX: Expect the success toast to be called with the message and an options object
      expect(toast.success).toHaveBeenCalledWith('Successfully imported 1 materials!', expect.any(Object));
    });
  });
});
</file>

<file path="src/components/Loading.jsx">
import React from 'react';
import { LoaderCircle } from 'lucide-react';

const Loading = () => {
  return (
    <div className="flex items-center justify-center h-screen w-full bg-gray-100 dark:bg-gray-900">
      {' '}
      {/* MODIFIED: Added dark background */}
      <div className="flex flex-col items-center">
        <LoaderCircle className="animate-spin h-12 w-12 text-blue-600" />
        <p className="mt-4 text-lg font-medium text-gray-700 dark:text-gray-300">
          {' '}
          {/* MODIFIED: Added dark text */}
          Loading Page...
        </p>
      </div>
    </div>
  );
};

export default Loading;
</file>

<file path="src/components/LogForm.jsx">
// src/components/LogForm.jsx
import React, { useState, useEffect, Fragment, useMemo } from 'react';
import { useAuth } from '../context/authContext';
import { db } from '../firebase';
import {
  collection,
  doc,
  runTransaction,
  serverTimestamp,
  query,
  getDocs,
  Timestamp,
} from 'firebase/firestore';
import toast from 'react-hot-toast';
import {
  X,
  LoaderCircle,
  ChevronsUpDown,
  Check,
  Layers,
  Maximize2,
  Hash,
  CheckCircle,
} from 'lucide-react';
import { Combobox, Transition } from '@headlessui/react';
import clsx from 'clsx';

const LogForm = ({ type, log, onClose, allMaterials }) => {
  const { currentUser, ADMIN_UID } = useAuth();
  const [selectedMaterial, setSelectedMaterial] = useState(null);
  const [quantity, setQuantity] = useState(log?.quantity || '');
  const [remarks, setRemarks] = useState(log?.remarks || '');

  const getInitialDateString = () => {
    if (log?.date?.toDate) {
      return log.date.toDate().toISOString().split('T')[0];
    }
    return new Date().toISOString().split('T')[0];
  };

  const [logDate, setLogDate] = useState(getInitialDateString());
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [materialQuery, setMaterialQuery] = useState('');
  const [quantityStep, setQuantityStep] = useState(1);

  const materialsForDropdown = useMemo(() => {
    if (!allMaterials) return [];
    return allMaterials.map((m) => ({
      ...m,
      label: m.description || 'No Description',
    }));
  }, [allMaterials]);

  useEffect(() => {
    if (log && materialsForDropdown.length > 0) {
      const preselected = materialsForDropdown.find(
        (m) => m.id === log.materialId,
      );
      setSelectedMaterial(preselected);
    }
  }, [log, materialsForDropdown]);

  useEffect(() => {
    setQuantityStep(
      selectedMaterial?.category?.toLowerCase() === 'pipes' ? 0.01 : 1,
    );
  }, [selectedMaterial]);

  const filteredMaterials = useMemo(() => {
    if (!materialQuery) return materialsForDropdown;
    const searchKeywords = materialQuery
      .toLowerCase()
      .split(' ')
      .filter((kw) => kw.trim() !== '');
    return materialsForDropdown.filter((material) => {
      const labelText = (material.label || '').toLowerCase();
      return searchKeywords.every((kw) => labelText.includes(kw));
    });
  }, [materialsForDropdown, materialQuery]);

  const issuanceOptions =
    type === 'issuance'
      ? filteredMaterials.filter((m) => (m.delivered || 0) > (m.issued || 0))
      : filteredMaterials;

  const runLogTransaction = async () => {
    const logCollectionRef = collection(db, `${type}_logs`);
    const materialRef = doc(
      db,
      `materials/${ADMIN_UID}/items`,
      selectedMaterial.id,
    );
    const logRef = log ? doc(logCollectionRef, log.id) : doc(logCollectionRef);
    await runTransaction(db, async (transaction) => {
      const materialDoc = await transaction.get(materialRef);
      if (!materialDoc.exists()) throw new Error('Material does not exist!');
      const materialData = materialDoc.data();
      const oldLogQty = log ? log.quantity : 0;
      const numQuantity =
        quantityStep === 1 ? parseInt(quantity, 10) : parseFloat(quantity);
      const quantityChange = numQuantity - oldLogQty;
      const newDelivered =
        (materialData.delivered || 0) +
        (type === 'delivery' ? quantityChange : 0);
      const newIssued =
        (materialData.issued || 0) + (type === 'issuance' ? quantityChange : 0);
      if (newDelivered < newIssued)
        throw new Error(
          'This action would result in a negative stock balance.',
        );
      if (type === 'issuance' && quantityChange > 0) {
        const currentBalance =
          (materialData.delivered || 0) - (materialData.issued || 0);
        if (quantityChange > currentBalance)
          throw new Error(
            `Issuance failed. Only ${currentBalance} items are in stock.`,
          );
      }

      const logData = {
        materialId: selectedMaterial.id,
        materialDescription: selectedMaterial.description,
        category: selectedMaterial.category,
        materialGrade: selectedMaterial.materialGrade,
        boreSize1: selectedMaterial.boreSize1,
        boreSize2: selectedMaterial.boreSize2 || null,
        supplier: selectedMaterial.supplier,
        quantity: numQuantity,
        remarks,
        date: Timestamp.fromDate(new Date(logDate)),
        lastEditedBy: currentUser.email,
        lastEditedAt: serverTimestamp(),
      };

      if (log) {
        transaction.update(logRef, logData);
      } else {
        transaction.set(logRef, {
          ...logData,
          createdBy: currentUser.email,
          createdAt: serverTimestamp(),
        });
      }
      transaction.update(materialRef, {
        delivered: newDelivered,
        issued: newIssued,
      });
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!selectedMaterial || !quantity || quantity <= 0) {
      setError('Please select a material and enter a valid quantity.');
      return;
    }
    setError('');
    setIsSubmitting(true);
    const toastId = toast.loading('Saving log...');
    try {
      await runLogTransaction();
      toast.success(`Log ${log ? 'updated' : 'created'} successfully!`, {
        id: toastId,
      });
      onClose();
    } catch (err) {
      toast.error(err.message || 'An unknown error occurred.', { id: toastId });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div
      className="fixed inset-0 bg-gray-600 bg-opacity-50 h-full w-full flex items-center justify-center p-4 z-50"
      onClick={(e) => {
        if (e.target === e.currentTarget) onClose();
      }}
    >
      <div className="relative mx-auto p-8 w-full max-w-2xl shadow-lg rounded-xl bg-white dark:bg-gray-800">
        <h3 className="text-2xl font-bold text-gray-800 dark:text-white mb-6 capitalize">
          {log ? `Edit ${type} Log` : `Add New ${type} Log`}
        </h3>
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-white"
        >
          <X />
        </button>
        <form onSubmit={handleSubmit}>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Material
              </label>
              <Combobox
                value={selectedMaterial}
                onChange={setSelectedMaterial}
                nullable
                disabled={!!log}
              >
                {({ open }) => (
                  <div className="relative">
                    <Combobox.Input
                      className="w-full h-11 rounded-md border border-gray-300 bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white py-2 pl-3 pr-10 text-sm shadow-sm"
                      displayValue={(material) => material?.label || ''}
                      onChange={(event) => setMaterialQuery(event.target.value)}
                      placeholder="Select a material..."
                    />
                    <Combobox.Button className="absolute inset-y-0 right-0 flex items-center pr-2">
                      <ChevronsUpDown className="h-5 w-5 text-gray-400" />
                    </Combobox.Button>
                    <Transition
                      as={Fragment}
                      show={open}
                      leave="transition ease-in duration-100"
                      leaveFrom="opacity-100"
                      leaveTo="opacity-0"
                    >
                      <Combobox.Options className="absolute mt-1 max-h-60 w-full overflow-auto rounded-md bg-white dark:bg-gray-700 py-1 text-base shadow-lg ring-1 ring-black/5 z-20">
                        {(type === 'issuance'
                          ? issuanceOptions
                          : filteredMaterials
                        ).map((material) => (
                          <Combobox.Option
                            key={material.id}
                            value={material}
                            className={({ active }) =>
                              `relative cursor-default select-none py-2 pl-10 pr-4 ${active ? 'bg-blue-600 text-white' : 'text-gray-900 dark:text-gray-300'}`
                            }
                          >
                            {({ selected }) => (
                              <>
                                {' '}
                                <span
                                  className={`block truncate ${selected ? 'font-medium' : 'font-normal'}`}
                                >
                                  {material.label}
                                </span>{' '}
                                {selected ? (
                                  <span
                                    className={`absolute inset-y-0 left-0 flex items-center pl-3 ${active ? 'text-white' : 'text-blue-600'}`}
                                  >
                                    <Check />
                                  </span>
                                ) : null}{' '}
                              </>
                            )}
                          </Combobox.Option>
                        ))}
                      </Combobox.Options>
                    </Transition>
                  </div>
                )}
              </Combobox>
            </div>
            {selectedMaterial && (
              <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 p-3 bg-slate-50 dark:bg-gray-700 rounded-lg border border-slate-200 dark:border-gray-600 text-sm">
                <div className="flex items-center gap-2">
                  <Hash
                    size={14}
                    className="text-gray-500 dark:text-gray-400"
                  />
                  <div>
                    <span className="font-semibold text-gray-800 dark:text-gray-200">
                      QE:{' '}
                    </span>
                    <span className="text-gray-600 dark:text-gray-300">
                      {selectedMaterial.expectedQty || 0}
                    </span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle size={14} className="text-green-500" />
                  <div>
                    <span className="font-semibold text-gray-800 dark:text-gray-200">
                      QD:{' '}
                    </span>
                    <span className="text-gray-600 dark:text-gray-300">
                      {selectedMaterial.delivered || 0}
                    </span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Layers
                    size={14}
                    className="text-gray-500 dark:text-gray-400"
                  />
                  <div>
                    <span className="font-semibold text-gray-800 dark:text-gray-200">
                      Grade:{' '}
                    </span>
                    <span className="text-gray-600 dark:text-gray-300">
                      {selectedMaterial.materialGrade}
                    </span>
                  </div>
                </div>
                <div className="flex items-center gap-2">
                  <Maximize2
                    size={14}
                    className="text-gray-500 dark:text-gray-400"
                  />
                  <div>
                    <span className="font-semibold text-gray-800 dark:text-gray-200">
                      Bore:{' '}
                    </span>
                    <span className="text-gray-600 dark:text-gray-300">
                      {selectedMaterial.boreSize1}
                    </span>
                  </div>
                </div>
              </div>
            )}
            <div>
              <label
                htmlFor="quantity"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Quantity
              </label>
              <input
                type="number"
                id="quantity"
                value={quantity}
                onChange={(e) => setQuantity(e.target.value)}
                step={quantityStep}
                className="w-full h-11 px-4 rounded-md border border-gray-300 dark:bg-gray-700 dark:border-gray-600 dark:text-white shadow-sm"
                min={quantityStep > 0.01 ? 1 : 0.01}
              />
            </div>
            <div>
              <label
                htmlFor="date"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Date
              </label>
              <input
                type="date"
                id="date"
                value={logDate}
                onChange={(e) => setLogDate(e.target.value)}
                className="w-full h-11 px-4 rounded-md border border-gray-300 dark:bg-gray-700 dark:border-gray-600 dark:text-white shadow-sm"
              />
            </div>
            <div>
              <label
                htmlFor="remarks"
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Remarks (Optional)
              </label>
              <textarea
                id="remarks"
                rows="3"
                value={remarks}
                onChange={(e) => setRemarks(e.target.value)}
                className="w-full p-4 rounded-md border border-gray-300 dark:bg-gray-700 dark:border-gray-600 dark:text-white shadow-sm"
              />
            </div>
            {error && <p className="text-sm text-red-500">{error}</p>}
          </div>
          <div className="mt-8 pt-5 border-t border-gray-200 dark:border-gray-700 flex justify-end gap-3">
            <button
              type="button"
              onClick={onClose}
              className="px-6 py-3 text-sm font-semibold bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting}
              className={clsx(
                'flex items-center justify-center w-32 px-6 py-3 text-sm font-semibold text-white rounded-lg shadow-md',
                isSubmitting ? 'bg-gray-400' : 'bg-blue-600 hover:bg-blue-700',
              )}
            >
              {isSubmitting ? (
                <LoaderCircle className="animate-spin h-5 w-5" />
              ) : (
                'Save Log'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default LogForm;
</file>

<file path="src/components/LogForm.test.jsx">
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import LogForm from './LogForm';
import { runTransaction } from 'firebase/firestore';

// --- Mocks ---
jest.mock('react-hot-toast');
jest.mock('../context/authContext', () => ({
  useAuth: () => ({
    currentUser: { isViewer: false, email: 'test@example.com' },
    ADMIN_UID: 'test-admin-uid',
  }),
}));
// The jest.mock for firebase is now handled globally in jest.config.cjs
jest.mock('firebase/firestore', () => ({
  ...jest.requireActual('firebase/firestore'),
  runTransaction: jest.fn(),
  doc: jest.fn(),
  collection: jest.fn(),
  serverTimestamp: jest.fn(() => 'mock-server-timestamp'),
  Timestamp: {
    fromDate: jest.fn(date => ({
      toDate: () => date,
    })),
  },
}));

describe('LogForm Component', () => {
  const mockOnClose = jest.fn();
  const mockAllMaterials = [
    { id: 'mat1', description: 'Material One', category: 'Pipes', delivered: 10, issued: 2, expectedQty: 10, materialGrade: 'A', boreSize1: '1"' },
    { id: 'mat2', description: 'Material Two', category: 'Valves', delivered: 5, issued: 5, expectedQty: 5, materialGrade: 'B', boreSize1: '2"' },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
    runTransaction.mockImplementation(async (db, transactionCallback) => {
      const transaction = {
        get: jest.fn().mockResolvedValue({ exists: () => true, data: () => mockAllMaterials[0] }),
        update: jest.fn(),
        set: jest.fn(),
      };
      await transactionCallback(transaction);
      return Promise.resolve();
    });
  });

  test('renders in "Add New Delivery Log" mode', async () => {
    render(<LogForm type="delivery" onClose={mockOnClose} allMaterials={mockAllMaterials} />);
    expect(await screen.findByText(/Add New delivery Log/i)).toBeInTheDocument();
  });
  
  test('renders in "Edit Issuance Log" mode with pre-filled data', async () => {
    const mockLog = {
      type: 'issuance',
      materialId: 'mat1',
      quantity: 5,
      remarks: 'Test remark',
      date: { toDate: () => new Date('2025-06-24') },
    };
    render(<LogForm type="issuance" log={mockLog} onClose={mockOnClose} allMaterials={mockAllMaterials} />);
    
    expect(await screen.findByText(/Edit issuance Log/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/Quantity/i)).toHaveValue(5);
  });

  test('shows validation error if form is submitted without a material or quantity', async () => {
    render(<LogForm type="delivery" onClose={mockOnClose} allMaterials={mockAllMaterials} />);
    
    const saveButton = screen.getByRole('button', { name: /Save Log/i });
    await userEvent.click(saveButton);

    expect(await screen.findByText('Please select a material and enter a valid quantity.')).toBeInTheDocument();
    expect(runTransaction).not.toHaveBeenCalled();
  });

  test('handles successful submission for a new delivery log', async () => {
    render(<LogForm type="delivery" onClose={mockOnClose} allMaterials={mockAllMaterials} />);
    
    const materialInput = screen.getByPlaceholderText('Select a material...');
    await userEvent.type(materialInput, 'Material One');
    await userEvent.click(await screen.findByText('Material One'));

    const quantityInput = screen.getByLabelText(/Quantity/i);
    await userEvent.clear(quantityInput);
    await userEvent.type(quantityInput, '15');
    
    const saveButton = screen.getByRole('button', { name: /Save Log/i });
    await userEvent.click(saveButton);
    
    await waitFor(() => {
      expect(runTransaction).toHaveBeenCalledTimes(1);
    });
    
    await waitFor(() => {
      expect(mockOnClose).toHaveBeenCalledTimes(1);
    });
  });
});
</file>

<file path="src/components/Login.jsx">
import React, { useState } from 'react';
import { signInWithEmailAndPassword } from 'firebase/auth';
import { auth } from '../firebase';
import clsx from 'clsx';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [errors, setErrors] = useState({}); // NEW: State for inline errors

  // NEW: Client-side validation function
  const validateForm = () => {
    const newErrors = {};
    if (!email) {
      newErrors.email = 'Email is required.';
    } else if (!/\S+@\S+\.\S+/.test(email)) {
      newErrors.email = 'Email address is invalid.';
    }
    if (!password) {
      newErrors.password = 'Password is required.';
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    setError('');
    setErrors({});
    // MODIFIED: Validate form before submitting
    if (!validateForm()) {
      return;
    }
    setIsSubmitting(true);
    try {
      await signInWithEmailAndPassword(auth, email, password);
    } catch (err) {
      switch (err.code) {
        case 'auth/user-not-found':
        case 'auth/invalid-email':
        case 'auth/wrong-password':
        case 'auth/invalid-credential':
          setError('Invalid email or password. Please try again.');
          break;
        default:
          setError('An unexpected error occurred. Please try again later.');
          break;
      }
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen w-full text-white font-montserrat relative overflow-hidden bg-[#1E2A5B]">
      <div
        className="absolute inset-0 bg-cover bg-center opacity-10 z-10"
        style={{ backgroundImage: "url('/Inventory.jpg')" }}
      ></div>
      <div className="absolute inset-0 z-20 pointer-events-none hidden lg:block">
        <img
          src="/graphic1.png"
          alt=""
          className="absolute opacity-20"
          style={{ top: '-8%', left: '41.5%', width: '11.8vw' }}
        />
        <img
          src="/graphic1.png"
          alt=""
          className="absolute opacity-20"
          style={{ top: '88%', left: '91.6%', width: '11.8vw' }}
        />
        <img
          src="/graphic2.png"
          alt=""
          className="absolute opacity-20"
          style={{ top: '6.4%', left: '90.6%', width: '4.5vw' }}
        />
      </div>
      <div className="relative z-30 flex items-center justify-center min-h-screen w-full px-6 sm:px-8 lg:px-12">
        <div className="w-full max-w-screen-xl mx-auto grid grid-cols-1 lg:grid-cols-11 gap-16 items-center">
          <div className="lg:col-span-6 flex flex-col h-full text-center lg:text-left">
            <header className="mb-0 flex items-center gap-4 justify-center lg:justify-start">
              <img
                src="/Steve Logo.png"
                alt="Steve Integrated Logo"
                className="h-12 w-12"
              />
              <h1 className="text-2xl font-semibold">Steve Integrated</h1>
            </header>
            <main className="flex-grow flex flex-col justify-center my-10 lg:my-0">
              <h2 className="text-6xl sm:text-7xl lg:text-8xl font-extrabold leading-tight text-white">
                Login
              </h2>
              <p className="text-xl md:text-2xl text-white/70 mt-4 mb-12">
                Sign in to continue
              </p>
              <p className="text-base max-w-lg text-white/60 mx-auto lg:mx-0">
                Access your inventory management dashboard to track materials,
                deliveries, and issues in real-time.
              </p>
              <div className="mt-16">
                <button className="bg-[#FDE047] text-[#1E3A8A] font-bold py-3 px-8 rounded-full text-lg transition-all duration-300 hover:bg-[#FACC15]">
                  Learn More
                </button>
              </div>
            </main>
            <footer className="w-full flex justify-center lg:justify-start">
              <img
                src="/graphic3.png"
                alt=""
                className="opacity-20"
                style={{ width: '6.2vw', minWidth: '50px' }}
              />
            </footer>
          </div>
          <div className="lg:col-span-5 flex items-center justify-center w-full">
            <div className="w-full max-w-lg p-10 md:p-14 rounded-3xl bg-white/10 shadow-2xl backdrop-blur-lg">
              <div className="text-center mb-10">
                <h3 className="text-3xl font-bold text-white">Welcome</h3>
                <p className="text-white/60 mt-1">Let's get you signed in.</p>
              </div>
              <form onSubmit={handleLogin} noValidate>
                {' '}
                {/* MODIFIED: Added noValidate */}
                <div className="space-y-7">
                  <div>
                    <label
                      htmlFor="email"
                      className="block text-xs font-medium text-white/70 mb-2 uppercase tracking-wider"
                    >
                      EMAIL
                    </label>
                    <input
                      type="email"
                      id="email"
                      value={email}
                      onChange={(e) => setEmail(e.target.value)}
                      placeholder="you@company.com"
                      className={clsx(
                        'w-full h-12 px-4 bg-white/10 rounded-lg text-white placeholder-white/50 border transition-all duration-300',
                        // MODIFIED: Add red border on error
                        errors.email ? 'border-red-400' : 'border-transparent',
                        'focus:outline-none focus:border-yellow-400 focus:bg-white/20',
                      )}
                    />
                    {/* NEW: Display inline error */}
                    {errors.email && (
                      <p className="text-red-400 text-sm mt-2">
                        {errors.email}
                      </p>
                    )}
                  </div>
                  <div>
                    <label
                      htmlFor="password"
                      className="block text-xs font-medium text-white/70 mb-2 uppercase tracking-wider"
                    >
                      PASSWORD
                    </label>
                    <input
                      type="password"
                      id="password"
                      value={password}
                      onChange={(e) => setPassword(e.target.value)}
                      placeholder="••••••••••"
                      className={clsx(
                        'w-full h-12 px-4 bg-white/10 rounded-lg text-white placeholder-white/50 border transition-all duration-300',
                        // MODIFIED: Add red border on error
                        errors.password
                          ? 'border-red-400'
                          : 'border-transparent',
                        'focus:outline-none focus:border-yellow-400 focus:bg-white/20',
                      )}
                    />
                    {/* NEW: Display inline error */}
                    {errors.password && (
                      <p className="text-red-400 text-sm mt-2">
                        {errors.password}
                      </p>
                    )}
                  </div>
                </div>
                {error && (
                  <p className="text-red-400 text-sm mt-6 text-center">
                    {error}
                  </p>
                )}
                <div className="mt-10">
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className={clsx(
                      'w-full font-bold py-3 rounded-full text-lg transition-all duration-300',
                      'bg-[#FDE047] text-[#1E3A8A]',
                      isSubmitting
                        ? 'opacity-50 cursor-not-allowed'
                        : 'hover:bg-[#FACC15]',
                    )}
                  >
                    {isSubmitting ? 'Signing In...' : 'Login'}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;
</file>

<file path="src/components/Login.test.jsx">
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import Login from './Login';
import { signInWithEmailAndPassword } from 'firebase/auth';

// --- Mocks ---
jest.mock('../firebase', () => ({
  auth: {}, // The auth object itself can be an empty object for this test
}));

jest.mock('firebase/auth', () => ({
  signInWithEmailAndPassword: jest.fn(() => Promise.resolve()),
}));

describe('Login Component', () => {

  beforeEach(() => {
    // Clear mock history before each test
    signInWithEmailAndPassword.mockClear();
  });

  test('renders the login form correctly', () => {
    render(<Login />);
    expect(screen.getByRole('heading', { name: /Login/i })).toBeInTheDocument();
    expect(screen.getByLabelText(/EMAIL/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/PASSWORD/i)).toBeInTheDocument();
  });

  test('shows validation errors for empty fields before submitting', async () => {
    render(<Login />);
    const loginButton = screen.getByRole('button', { name: /Login/i });
    
    await userEvent.click(loginButton);
    
    // Check that Firebase was NOT called
    expect(signInWithEmailAndPassword).not.toHaveBeenCalled();

    // Check that error messages appeared
    expect(await screen.findByText('Email is required.')).toBeInTheDocument();
    expect(await screen.findByText('Password is required.')).toBeInTheDocument();
  });

  test('calls signInWithEmailAndPassword with correct credentials on successful submission', async () => {
    render(<Login />);

    const emailInput = screen.getByLabelText(/EMAIL/i);
    const passwordInput = screen.getByLabelText(/PASSWORD/i);
    const loginButton = screen.getByRole('button', { name: /Login/i });

    await userEvent.type(emailInput, 'test@user.com');
    await userEvent.type(passwordInput, 'password123');
    await userEvent.click(loginButton);

    await waitFor(() => {
      expect(signInWithEmailAndPassword).toHaveBeenCalledTimes(1);
      expect(signInWithEmailAndPassword).toHaveBeenCalledWith(expect.any(Object), 'test@user.com', 'password123');
    });
  });
});
</file>

<file path="src/components/LogTable.jsx">
// src/components/LogTable.jsx
import React, { useMemo } from 'react';
import { useAuth } from '../context/authContext';
import { db } from '../firebase';
import { doc, runTransaction } from 'firebase/firestore';
import toast from 'react-hot-toast';
import { Edit, Trash2 } from 'lucide-react';

const LogTable = ({
  logs,
  type,
  onEdit,
  currentPage,
  itemsPerPage,
  allMaterials,
}) => {
  const { currentUser, ADMIN_UID } = useAuth();

  const materialsMap = useMemo(() => {
    return new Map(allMaterials.map((m) => [m.id, m]));
  }, [allMaterials]);

  const handleDelete = async (log) => {
    if (
      !window.confirm(
        'Are you sure you want to delete this log? This action is permanent and will update the inventory count.',
      )
    )
      return;

    const toastId = toast.loading('Deleting log...');
    const logRef = doc(db, `${type}_logs`, log.id);
    const materialRef = doc(db, `materials/${ADMIN_UID}/items`, log.materialId);

    try {
      await runTransaction(db, async (transaction) => {
        const materialDoc = await transaction.get(materialRef);
        if (!materialDoc.exists())
          throw new Error('Associated material not found!');

        const materialData = materialDoc.data();
        const quantityChange = -log.quantity;

        const newDelivered =
          (materialData.delivered || 0) +
          (type === 'delivery' ? quantityChange : 0);
        const newIssued =
          (materialData.issued || 0) +
          (type === 'issuance' ? quantityChange : 0);

        if (newDelivered < newIssued) {
          throw new Error(
            'Deletion failed: This would result in a negative stock balance.',
          );
        }

        transaction.delete(logRef);
        transaction.update(materialRef, {
          delivered: newDelivered,
          issued: newIssued,
        });
      });
      toast.success('Log deleted successfully.', { id: toastId });
    } catch (err) {
      console.error('Delete transaction failed:', err);
      toast.error(err.message || 'Failed to delete log.', { id: toastId });
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-md dark:bg-gray-800">
      <div className="overflow-x-auto overflow-y-auto max-h-[65vh]">
        <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          {/*
           */}
          <thead className="bg-gray-50 dark:bg-gray-700">
            {/*
             */}
            <tr className="sticky top-0 z-10 bg-gray-50 dark:bg-gray-700">
              {/*
               */}
              <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                S/N
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Date
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Material
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Category
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Supplier
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Grade
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Bore 1
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Bore 2
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Quantity
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Remarks
              </th>
              {/*
               */}
              <th className="px-6 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Actions
              </th>
              {/*
               */}
            </tr>
            {/*
             */}
          </thead>
          {/*
           */}
          <tbody className="bg-white divide-y divide-gray-200 dark:bg-gray-800 dark:divide-gray-700">
            {/*
             */}
            {logs.length > 0 ? (
              logs.map((log, index) => {
                const category =
                  log.category ||
                  materialsMap.get(log.materialId)?.category ||
                  'N/A';
                const displayDate = log.date?.toDate
                  ? log.date.toDate().toLocaleDateString()
                  : log.date;

                return (
                  <tr key={log.id}>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-center">
                      {(currentPage - 1) * itemsPerPage + index + 1}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-center">
                      {displayDate}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-pre-wrap max-w-sm text-sm font-medium text-gray-900 dark:text-white">
                      {log.materialDescription}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-center">
                      {category}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-center">
                      {log.supplier || 'N/A'}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-center">
                      {log.materialGrade || 'N/A'}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-center">
                      {log.boreSize1 || 'N/A'}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400 text-center">
                      {log.boreSize2 || 'N/A'}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-bold text-gray-800 dark:text-gray-200 text-center">
                      {log.quantity}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-pre-wrap max-w-xs text-sm text-gray-500 dark:text-gray-400">
                      {log.remarks || 'N/A'}
                    </td>
                    {/*
                     */}
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-center">
                      {!currentUser.isViewer && (
                        <div className="flex items-center justify-center space-x-4">
                          <button
                            onClick={() => onEdit(log)}
                            className="text-blue-600 hover:text-blue-900"
                            title="Edit Log"
                          >
                            <Edit size={16} />
                          </button>
                          <button
                            onClick={() => handleDelete(log)}
                            className="text-red-600 hover:text-red-900"
                            title="Delete Log"
                          >
                            <Trash2 size={16} />
                          </button>
                        </div>
                      )}
                    </td>
                    {/*
                     */}
                  </tr>
                );
              })
            ) : (
              <tr>
                <td
                  colSpan="11"
                  className="text-center py-10 text-gray-500 dark:text-gray-400"
                >
                  No logs found.
                </td>
              </tr>
            )}
            {/*
             */}
          </tbody>
          {/*
           */}
        </table>
      </div>
    </div>
  );
};

export default LogTable;
</file>

<file path="src/components/LogTable.test.jsx">
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import LogTable from './LogTable';
import { useAuth } from '../context/authContext';
import { runTransaction } from 'firebase/firestore';
import toast from 'react-hot-toast';

// --- Mocks ---
jest.mock('../context/authContext');
jest.mock('react-hot-toast');
jest.mock('firebase/firestore', () => ({
  ...jest.requireActual('firebase/firestore'),
  runTransaction: jest.fn(),
  doc: jest.fn(),
}));

// Mock data
const mockLogs = [
  { id: 'log1', materialId: 'mat1', materialDescription: 'Log Entry One', quantity: 10, date: { toDate: () => new Date() } },
  { id: 'log2', materialId: 'mat2', materialDescription: 'Log Entry Two', quantity: 5, date: { toDate: () => new Date() } },
];

const mockAllMaterials = [
    { id: 'mat1', description: 'Material One' },
    { id: 'mat2', description: 'Material Two' },
];

describe('LogTable Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    // Default mock for Admin user
    useAuth.mockReturnValue({
      currentUser: { isViewer: false },
      ADMIN_UID: 'test-admin-uid',
    });
    // Mock runTransaction to always succeed
    runTransaction.mockImplementation(async (db, transactionCallback) => {
      const transaction = {
        get: jest.fn().mockResolvedValue({ exists: () => true, data: () => ({ delivered: 10, issued: 0 }) }),
        delete: jest.fn(),
        update: jest.fn(),
      };
      await transactionCallback(transaction);
      return Promise.resolve();
    });
  });

  test('renders logs correctly', () => {
    render(<LogTable logs={mockLogs} type="delivery" onEdit={() => {}} currentPage={1} itemsPerPage={10} allMaterials={mockAllMaterials} />);
    expect(screen.getByText('Log Entry One')).toBeInTheDocument();
    expect(screen.getByText('Log Entry Two')).toBeInTheDocument();
  });

  test('hides action buttons for viewer users', () => {
    // Override mock for viewer user
    useAuth.mockReturnValue({ currentUser: { isViewer: true } });
    render(<LogTable logs={mockLogs} type="delivery" onEdit={() => {}} currentPage={1} itemsPerPage={10} allMaterials={mockAllMaterials} />);
    
    // queryBy... returns null if not found, which is what we want
    const editButtons = screen.queryAllByTitle(/Edit Log/i);
    const deleteButtons = screen.queryAllByTitle(/Delete Log/i);

    expect(editButtons.length).toBe(0);
    expect(deleteButtons.length).toBe(0);
  });

  test('shows action buttons for admin users', () => {
    render(<LogTable logs={mockLogs} type="delivery" onEdit={() => {}} currentPage={1} itemsPerPage={10} allMaterials={mockAllMaterials} />);
    
    const editButtons = screen.getAllByTitle(/Edit Log/i);
    const deleteButtons = screen.getAllByTitle(/Delete Log/i);

    expect(editButtons.length).toBe(mockLogs.length);
    expect(deleteButtons.length).toBe(mockLogs.length);
  });

  test('calls delete transaction when delete button is clicked and confirmed', async () => {
    // Mock the window.confirm dialog to return true (user clicks "OK")
    window.confirm = jest.fn(() => true);
    
    render(<LogTable logs={mockLogs} type="delivery" onEdit={() => {}} currentPage={1} itemsPerPage={10} allMaterials={mockAllMaterials} />);

    // Find the delete button for the first log entry
    const deleteButtons = screen.getAllByTitle(/Delete Log/i);
    await userEvent.click(deleteButtons[0]);

    // Check that the confirmation was shown
    expect(window.confirm).toHaveBeenCalledTimes(1);
    
    // Check that the database transaction was called
    await waitFor(() => {
      expect(runTransaction).toHaveBeenCalledTimes(1);
    });

    // Check that the success toast was shown
    await waitFor(() => {
        expect(toast.success).toHaveBeenCalledWith('Log deleted successfully.', expect.any(Object));
    });
  });
});
</file>

<file path="src/components/MaterialTable.jsx">
// src/components/MaterialTable.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { useAuth } from '../context/authContext';
import { db } from '../firebase';
import {
  collection,
  query,
  where,
  onSnapshot,
  doc,
  deleteDoc,
} from 'firebase/firestore';
import { Plus, Search, Edit, Trash2, X } from 'lucide-react';
import { toast } from 'react-hot-toast';
import StatsCards from './StatsCards';
import AddEditMaterialModal from './AddEditMaterialModal';
import ImportCSV from './ImportCSV';
import Pagination from './Pagination';

const ITEMS_PER_PAGE = 10;

const MaterialTable = ({ filterKey, filterValue, statusFilter, viewType }) => {
  const { currentUser, ADMIN_UID } = useAuth();
  const [materials, setMaterials] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [isMaterialModalOpen, setIsMaterialModalOpen] = useState(false);
  const [editingMaterial, setEditingMaterial] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);

  useEffect(() => {
    const materialsCollectionRef = collection(
      db,
      `materials/${ADMIN_UID}/items`,
    );
    let q;
    if ((filterKey === 'category' || filterKey === 'supplier') && filterValue) {
      q = query(materialsCollectionRef, where(filterKey, '==', filterValue));
    } else {
      q = query(materialsCollectionRef);
    }

    const unsubscribe = onSnapshot(
      q,
      (snapshot) => {
        setMaterials(snapshot.docs.map((d) => ({ id: d.id, ...d.data() })));
        setCurrentPage(1);
      },
      (error) => console.error('Error fetching materials: ', error),
    );

    return () => unsubscribe();
  }, [ADMIN_UID, filterKey, filterValue]);

  const handleDelete = async (id) => {
    if (currentUser.isViewer) return;
    if (
      window.confirm('Are you sure? This will also delete associated logs.')
    ) {
      try {
        await deleteDoc(doc(db, `materials/${ADMIN_UID}/items`, id));
        toast.success('Material deleted.');
      } catch (error) {
        toast.error('Failed to delete material.');
      }
    }
  };

  const processedMaterials = useMemo(() => {
    let filtered = [...materials];
    if (statusFilter) {
      filtered = filtered.filter((m) => {
        const delivered = m.delivered || 0;
        const expected = m.expectedQty || 0;
        if (statusFilter === 'surplus') return delivered > expected;
        if (statusFilter === 'deficit')
          return delivered < expected && delivered > 0;
        if (statusFilter === 'exact')
          return delivered === expected && delivered > 0;
        return false;
      });
    }

    if (searchTerm) {
      const searchKeywords = searchTerm
        .toLowerCase()
        .split(' ')
        .filter((kw) => kw.trim() !== '');
      filtered = filtered.filter((m) => {
        const descriptionText = m.description.toLowerCase();
        return searchKeywords.every((kw) => descriptionText.includes(kw));
      });
    }
    return filtered;
  }, [materials, searchTerm, statusFilter]);

  const paginatedMaterials = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    return processedMaterials.slice(startIndex, startIndex + ITEMS_PER_PAGE);
  }, [processedMaterials, currentPage]);

  const totalPages = Math.ceil(processedMaterials.length / ITEMS_PER_PAGE);

  const getPageTitle = () => {
    if (statusFilter) return `${statusFilter} Materials`;
    if (viewType === 'balanced') return 'Balanced Materials';
    if (filterValue) return `${filterValue} List`;
    return 'All Materials';
  };

  const dashboardStats = {
    totalMaterials: materials.length,
    totalDelivered: materials.reduce((sum, m) => sum + (m.delivered || 0), 0),
    totalIssued: materials.reduce((sum, m) => sum + (m.issued || 0), 0),
  };

  const renderTableHeaders = () => {
    const baseHeaders = [
      'S/N',
      'Description',
      'Cat.',
      'Grade',
      'Bore 1',
      'Bore 2',
    ];
    const actionHeader = ['Actions'];
    let dynamicHeaders = [];

    switch (viewType) {
      case 'surplus':
        dynamicHeaders = ['Expected', 'Delivered', 'Surplus'];
        break;
      case 'deficit':
        dynamicHeaders = ['Expected', 'Delivered', 'Deficit'];
        break;
      case 'exact':
        dynamicHeaders = ['Expected', 'Delivered'];
        break;
      default:
        dynamicHeaders = ['Expected', 'Delivered', 'Issued', 'Balance'];
    }

    const allHeaders = [...baseHeaders, ...dynamicHeaders, ...actionHeader];
    return (
      <tr className="sticky top-0 z-10 bg-gray-50 dark:bg-gray-700">
        {/*
         */}
        {allHeaders.map((header, index) => (
          <th
            key={index}
            className={`px-6 py-3 text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider ${header === 'Description' ? 'text-left' : 'text-center'}`}
          >
            {header}
          </th>
        ))}
        {/*
         */}
      </tr>
    );
  };

  const renderTableBody = (material, index) => {
    const delivered = material.delivered || 0;
    const issued = material.issued || 0;
    const expected = material.expectedQty || 0;
    const balance = delivered - issued;

    const isPipe = material.category?.toLowerCase() === 'pipes';

    const formatNumber = (num) => {
      if (isPipe) {
        return Math.round(num * 100) / 100;
      }
      return Math.round(num);
    };

    const baseCells = (
      <>
        <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
          {(currentPage - 1) * ITEMS_PER_PAGE + index + 1}
        </td>
        <td className="px-6 py-4 max-w-sm">
          <div className="text-sm font-medium text-gray-900 dark:text-white">
            {material.description}
          </div>
        </td>
        <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
          {material.category}
        </td>
        <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
          {material.materialGrade}
        </td>
        <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
          {material.boreSize1}
        </td>
        <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
          {material.boreSize2 || 'N/A'}
        </td>
      </>
    );

    let dynamicCells;
    switch (viewType) {
      case 'surplus':
        dynamicCells = (
          <>
            <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
              {expected}
            </td>
            <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
              {delivered}
            </td>
            <td className="px-6 py-4 text-center text-sm font-bold text-green-600 dark:text-green-400">
              {formatNumber(delivered - expected)}
            </td>
          </>
        );
        break;
      case 'deficit':
        dynamicCells = (
          <>
            <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
              {expected}
            </td>
            <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
              {delivered}
            </td>
            <td className="px-6 py-4 text-center text-sm font-bold text-red-500 dark:text-red-400">
              {formatNumber(expected - delivered)}
            </td>
          </>
        );
        break;
      case 'exact':
        dynamicCells = (
          <>
            <td className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
              {expected}
            </td>
            <td className="px-6 py-4 text-center text-sm font-bold text-blue-500 dark:text-blue-400">
              {delivered}
            </td>
          </>
        );
        break;
      default:
        dynamicCells = (
          <>
            <td className="px-6 py-4 text-center text-sm text-gray-800 dark:text-gray-200 font-bold">
              {expected}
            </td>
            <td className="px-6 py-4 text-center text-sm text-green-600 dark:text-green-400 font-semibold">
              {formatNumber(delivered)}
            </td>
            <td className="px-6 py-4 text-center text-sm text-yellow-600 dark:text-yellow-400 font-semibold">
              {formatNumber(issued)}
            </td>
            <td
              className={`px-6 py-4 text-center text-sm font-bold ${balance >= 0 ? 'text-blue-500 dark:text-blue-400' : 'text-red-500 dark:text-red-400'}`}
            >
              {formatNumber(balance)}
            </td>
          </>
        );
    }

    return (
      <tr key={material.id}>
        {/*
         */}
        {baseCells}
        {/*
         */}
        {dynamicCells}
        {/*
         */}
        <td className="px-6 py-4 text-center text-sm font-medium">
          {!currentUser.isViewer && (
            <div className="flex items-center justify-center space-x-4">
              <button
                onClick={() => {
                  setEditingMaterial(material);
                  setIsMaterialModalOpen(true);
                }}
                className="text-blue-600 hover:text-blue-900"
              >
                <Edit className="h-4 w-4" />
              </button>
              <button
                onClick={() => handleDelete(material.id)}
                className="text-red-600 hover:text-red-900"
              >
                <Trash2 className="h-4 w-4" />
              </button>
            </div>
          )}
        </td>
        {/*
         */}
      </tr>
    );
  };

  return (
    <>
      <StatsCards stats={dashboardStats} />
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md mt-8">
        <div className="p-6 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center flex-wrap gap-4">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200 capitalize">
            {getPageTitle()}
          </h2>
          <div className="flex items-center space-x-4">
            <div className="relative">
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => {
                  setSearchTerm(e.target.value);
                  setCurrentPage(1);
                }}
                placeholder="Search descriptions..."
                className="pl-10 pr-10 py-2 border rounded-lg bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              />
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              {searchTerm && (
                <button
                  onClick={() => {
                    setSearchTerm('');
                    setCurrentPage(1);
                  }}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  <X className="h-5 w-5" />
                </button>
              )}
            </div>
            {!statusFilter &&
              viewType !== 'balanced' &&
              !currentUser.isViewer && (
                <div className="flex items-center space-x-2">
                  <ImportCSV />
                  <button
                    onClick={() => {
                      setEditingMaterial(null);
                      setIsMaterialModalOpen(true);
                    }}
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2"
                    title="Add New Material"
                  >
                    <Plus className="h-5 w-5" />
                    <span>Add</span>
                  </button>
                </div>
              )}
          </div>
        </div>
        <div className="overflow-x-auto overflow-y-auto max-h-[65vh]">
          <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
            {/*
             */}
            <thead className="bg-gray-50 dark:bg-gray-700">
              {renderTableHeaders()}
            </thead>
            {/*
             */}
            <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
              {/*
               */}
              {paginatedMaterials.length > 0 ? (
                paginatedMaterials.map((material, index) =>
                  renderTableBody(material, index),
                )
              ) : (
                <tr>
                  <td
                    colSpan="11"
                    className="text-center py-10 text-gray-500 dark:text-gray-400"
                  >
                    No materials found.
                  </td>
                </tr>
              )}
              {/*
               */}
            </tbody>
            {/*
             */}
          </table>
        </div>
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={setCurrentPage}
        />
      </div>
      {isMaterialModalOpen && (
        <AddEditMaterialModal
          material={editingMaterial}
          onClose={() => {
            setIsMaterialModalOpen(false);
            setEditingMaterial(null);
          }}
        />
      )}
    </>
  );
};

export default MaterialTable;
</file>

<file path="src/components/MaterialTable.test.jsx">
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import MaterialTable from './MaterialTable';
import { collection, query, onSnapshot } from 'firebase/firestore';

// --- Mocks ---
jest.mock('../context/authContext', () => ({
  useAuth: () => ({
    currentUser: { isViewer: false },
    ADMIN_UID: 'test-admin-uid',
  }),
}));

// Mock child components that render modals to prevent them from interfering
jest.mock('./AddEditMaterialModal', () => () => <div>Add/Edit Modal</div>);
jest.mock('./ImportCSV', () => () => <button>Import CSV</button>);

// Mock the onSnapshot function from Firestore
jest.mock('firebase/firestore', () => ({
  ...jest.requireActual('firebase/firestore'), // keep other exports
  onSnapshot: jest.fn(),
  collection: jest.fn(),
  query: jest.fn(),
  where: jest.fn(),
  doc: jest.fn(),
  deleteDoc: jest.fn(),
}));

const mockMaterials = [
  { id: '1', description: 'Surplus Special Pipe', category: 'Pipes', expectedQty: 10, delivered: 15, issued: 2 },
  { id: '2', description: 'Deficit Gate Valve', category: 'Valves', expectedQty: 20, delivered: 5, issued: 1 },
  { id: '3', description: 'Exact Flange', category: 'Fittings', expectedQty: 5, delivered: 5, issued: 3 },
  { id: '4', description: 'Untouched Bolt', category: 'Fittings', expectedQty: 100, delivered: 0, issued: 0 },
];

// Helper to set up the onSnapshot mock
const setupOnSnapshotMock = (data) => {
  onSnapshot.mockImplementation((_query, callback) => {
    const mockSnapshot = {
      docs: data.map(doc => ({
        id: doc.id,
        data: () => doc,
      })),
    };
    callback(mockSnapshot);
    // Return a mock unsubscribe function
    return jest.fn();
  });
};

describe('MaterialTable Component', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    setupOnSnapshotMock(mockMaterials);
  });

  test('renders the table with initial materials', async () => {
    render(<MaterialTable />);
    // Check for a material from each category to ensure they all render
    expect(await screen.findByText('Surplus Special Pipe')).toBeInTheDocument();
    expect(await screen.findByText('Deficit Gate Valve')).toBeInTheDocument();
    expect(await screen.findByText('Exact Flange')).toBeInTheDocument();
  });

  test('filters materials based on search term', async () => {
    render(<MaterialTable />);
    
    const searchInput = screen.getByPlaceholderText(/Search descriptions.../i);
    await userEvent.type(searchInput, 'Surplus');

    // After searching, only the "Surplus" pipe should be visible
    await waitFor(() => {
      expect(screen.getByText('Surplus Special Pipe')).toBeInTheDocument();
    });
    expect(screen.queryByText('Deficit Gate Valve')).not.toBeInTheDocument();
    expect(screen.queryByText('Exact Flange')).not.toBeInTheDocument();
  });

  test('filters materials correctly when given a "surplus" statusFilter prop', async () => {
    render(<MaterialTable statusFilter="surplus" />);

    // Only the material where delivered > expected should be shown
    await waitFor(() => {
      expect(screen.getByText('Surplus Special Pipe')).toBeInTheDocument();
    });
    expect(screen.queryByText('Deficit Gate Valve')).not.toBeInTheDocument();
    expect(screen.queryByText('Exact Flange')).not.toBeInTheDocument();
  });

  test('filters materials correctly when given a "deficit" statusFilter prop', async () => {
    render(<MaterialTable statusFilter="deficit" />);

    // Only the material where delivered < expected should be shown
    await waitFor(() => {
      expect(screen.getByText('Deficit Gate Valve')).toBeInTheDocument();
    });
    expect(screen.queryByText('Surplus Special Pipe')).not.toBeInTheDocument();
    expect(screen.queryByText('Exact Flange')).not.toBeInTheDocument();
  });
});
</file>

<file path="src/components/Pagination.jsx">
// src/components/Pagination.jsx

import React from 'react';
import { ChevronLeft, ChevronRight } from 'lucide-react';

const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  if (totalPages <= 1) {
    return null;
  }

  return (
    <div className="flex items-center justify-between mt-4 px-6 py-3 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
      {/* MODIFIED: Added data-testid for robust testing */}
      <p
        className="text-sm text-gray-700 dark:text-gray-300"
        data-testid="pagination-info"
      >
        Page <span className="font-medium">{currentPage}</span> of{' '}
        <span className="font-medium">{totalPages}</span>
      </p>
      <div className="flex items-center space-x-2">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage === 1}
          className="flex items-center px-4 py-2 text-sm font-medium text-gray-600 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <ChevronLeft size={16} className="mr-2" />
          Previous
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage === totalPages}
          className="flex items-center px-4 py-2 text-sm font-medium text-gray-600 dark:text-gray-300 bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-600 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          Next
          <ChevronRight size={16} className="ml-2" />
        </button>
      </div>
    </div>
  );
};

export default Pagination;
</file>

<file path="src/components/Pagination.test.jsx">
// src/components/Pagination.test.jsx

import React from 'react';
import { render, screen } from '@testing-library/react';
import Pagination from './Pagination';

describe('Pagination Component', () => {
  test('renders correctly when there are multiple pages', () => {
    render(<Pagination currentPage={2} totalPages={5} onPageChange={() => {}} />);
    // MODIFIED: Use getByTestId and toHaveTextContent for a more robust test
    const paginationInfo = screen.getByTestId('pagination-info');
    expect(paginationInfo).toHaveTextContent('Page 2 of 5');
  });

  test('disables "Previous" button on the first page', () => {
    render(<Pagination currentPage={1} totalPages={5} onPageChange={() => {}} />);
    expect(screen.getByText('Previous')).toBeDisabled();
  });

  test('disables "Next" button on the last page', () => {
    render(<Pagination currentPage={5} totalPages={5} onPageChange={() => {}} />);
    expect(screen.getByText('Next')).toBeDisabled();
  });

  test('does not render if there is only one page', () => {
    const { container } = render(<Pagination currentPage={1} totalPages={1} onPageChange={() => {}} />);
    expect(container).toBeEmptyDOMElement();
  });
});
</file>

<file path="src/components/Sidebar.jsx">
import React, { useState } from 'react';
import { NavLink } from 'react-router-dom';
import { useAuth } from '../context/authContext';
import { useLayout } from '../context/LayoutContext';
import {
  Box,
  Building,
  ChevronDown,
  ChevronRight,
  LayoutDashboard,
  Download,
  Upload,
  CheckCircle,
  MinusCircle,
  AlertCircle,
  Scale,
} from 'lucide-react';
import clsx from 'clsx';

const Sidebar = () => {
  const { appMetadata } = useAuth();
  const { isSidebarCollapsed } = useLayout();
  const [dashboardOpen, setDashboardOpen] = useState(true);
  const [suppliersOpen, setSuppliersOpen] = useState(false);

  const linkClass =
    'flex items-center p-3 rounded-lg text-gray-300 hover:bg-blue-700 hover:text-white transition-colors w-full';
  const activeLinkClass = 'bg-blue-700 text-white';
  const childLinkClass = `flex items-center py-2 px-3 text-sm rounded-md hover:text-white transition-colors ${
    isSidebarCollapsed ? 'justify-center' : 'ml-6'
  }`;

  return (
    <div
      className={clsx(
        'flex flex-col bg-gray-800 dark:bg-gray-900 text-white h-full transition-all duration-300 ease-in-out overflow-x-hidden', // MODIFIED: Added dark background
        isSidebarCollapsed ? 'w-15' : 'w-64',
      )}
    >
      {/* MODIFIED: Header logic simplified to guarantee logo visibility and centering */}
      <div
        className={clsx(
          'flex items-center h-20 border-b border-gray-700 flex-shrink-0',
          isSidebarCollapsed ? 'justify-center' : 'px-4 justify-start',
        )}
      >
        <img
          src="/Steve Logo.png"
          alt="Logo"
          className="h-10 w-10 flex-shrink-0"
        />
        {!isSidebarCollapsed && (
          <span className="ml-2 font-bold text-xl whitespace-nowrap">
            Steve Integrated
          </span>
        )}
      </div>

      <nav className={clsx('flex-1 px-4 py-4 space-y-1 overflow-y-auto', isSidebarCollapsed && 'border-r border-r-gray-700')}>
        <div>
          <button
            onClick={() =>
              !isSidebarCollapsed && setDashboardOpen(!dashboardOpen)
            }
            className={`${linkClass} ${
              isSidebarCollapsed ? 'justify-center' : 'justify-between'
            }`}
            title="Dashboard"
          >
            <div className="flex items-center">
              <LayoutDashboard size={20} className="flex-shrink-0" />
              {!isSidebarCollapsed && <span className="ml-4">Dashboard</span>}
            </div>
            {!isSidebarCollapsed &&
              (dashboardOpen ? (
                <ChevronDown size={16} />
              ) : (
                <ChevronRight size={16} />
              ))}
          </button>
        </div>
        {!isSidebarCollapsed && dashboardOpen && (
          <div className="space-y-1 pl-6">
            <NavLink
              to="/"
              className={({ isActive }) =>
                `${childLinkClass} ml-0 ${
                  isActive ? 'text-white' : 'text-gray-400'
                }`
              }
              end
              title="All Materials"
            >
              All Materials
            </NavLink>{' '}
            {/* MODIFIED: Added dark text */}
            {appMetadata.categories?.sort().map((cat) => (
              <NavLink
                key={cat}
                to={`/category/${encodeURIComponent(cat)}`}
                title={cat}
                className={({ isActive }) =>
                  `${childLinkClass} ml-0 ${
                    isActive ? 'text-white' : 'text-gray-400'
                  }`
                }
              >
                {' '}
                {/* MODIFIED: Added dark text */}
                <Box size={16} className="mr-3 flex-shrink-0" />
                <span className="truncate">{cat}</span>
              </NavLink>
            ))}
          </div>
        )}

        <div>
          <button
            onClick={() =>
              !isSidebarCollapsed && setSuppliersOpen(!suppliersOpen)
            }
            className={`${linkClass} ${
              isSidebarCollapsed ? 'justify-center' : 'justify-between'
            }`}
            title="Suppliers"
          >
            <div className="flex items-center">
              <Building size={20} className="flex-shrink-0" />
              {!isSidebarCollapsed && <span className="ml-4">Suppliers</span>}
            </div>
            {!isSidebarCollapsed &&
              (suppliersOpen ? (
                <ChevronDown size={16} />
              ) : (
                <ChevronRight size={16} />
              ))}
          </button>
        </div>
        {!isSidebarCollapsed && suppliersOpen && (
          <div className="space-y-1 pl-6">
            {appMetadata.suppliers?.sort().map((sup) => (
              <NavLink
                key={sup}
                to={`/supplier/${encodeURIComponent(sup)}`}
                title={sup}
                className={({ isActive }) =>
                  `${childLinkClass} ml-0 ${
                    isActive ? 'text-white' : 'text-gray-400'
                  }`
                }
              >
                {' '}
                {/* MODIFIED: Added dark text */}
                <span className="truncate">{sup}</span>
              </NavLink>
            ))}
          </div>
        )}

        <div className="pt-2 border-t border-gray-700/50 mt-2 space-y-1">
          <NavLink
            to="/delivery-log"
            title="Delivery Log"
            className={({ isActive }) =>
              `${linkClass} ${isActive ? activeLinkClass : ''} ${
                isSidebarCollapsed ? 'justify-center' : ''
              }`
            }
          >
            <Download size={20} className="flex-shrink-0" />
            {!isSidebarCollapsed && <span className="ml-4">Delivery Log</span>}
          </NavLink>
          <NavLink
            to="/issuance-log"
            title="Issuance Log"
            className={({ isActive }) =>
              `${linkClass} ${isActive ? activeLinkClass : ''} ${
                isSidebarCollapsed ? 'justify-center' : ''
              }`
            }
          >
            <Upload size={20} className="flex-shrink-0" />
            {!isSidebarCollapsed && <span className="ml-4">Issuance Log</span>}
          </NavLink>
        </div>

        <div className="pt-2 border-t border-gray-700/50 mt-2 space-y-1">
          <NavLink
            to="/balanced-materials"
            title="Balanced Materials"
            className={({ isActive }) =>
              `${linkClass} ${isActive ? activeLinkClass : ''} ${
                isSidebarCollapsed ? 'justify-center' : ''
              }`
            }
          >
            <Scale size={20} className="flex-shrink-0" />
            {!isSidebarCollapsed && (
              <span className="ml-4">Balanced Materials</span>
            )}
          </NavLink>
          <NavLink
            to="/status/surplus"
            title="Surplus Materials"
            className={({ isActive }) =>
              `${linkClass} ${isActive ? activeLinkClass : ''} ${
                isSidebarCollapsed ? 'justify-center' : ''
              }`
            }
          >
            <CheckCircle size={20} className="flex-shrink-0 text-green-400" />
            {!isSidebarCollapsed && (
              <span className="ml-4">Surplus Materials</span>
            )}
          </NavLink>
          <NavLink
            to="/status/deficit"
            title="Deficit Materials"
            className={({ isActive }) =>
              `${linkClass} ${isActive ? activeLinkClass : ''} ${
                isSidebarCollapsed ? 'justify-center' : ''
              }`
            }
          >
            <AlertCircle size={20} className="flex-shrink-0 text-red-400" />
            {!isSidebarCollapsed && (
              <span className="ml-4">Deficit Materials</span>
            )}
          </NavLink>
          <NavLink
            to="/status/exact"
            title="Exact Materials"
            className={({ isActive }) =>
              `${linkClass} ${isActive ? activeLinkClass : ''} ${
                isSidebarCollapsed ? 'justify-center' : ''
              }`
            }
          >
            <MinusCircle size={20} className="flex-shrink-0 text-yellow-400" />
            {!isSidebarCollapsed && (
              <span className="ml-4">Exact Materials</span>
            )}
          </NavLink>
        </div>
      </nav>
    </div>
  );
};

export default Sidebar;
</file>

<file path="src/components/StatsCards.jsx">
import React from 'react';
import { Package, Truck, Send } from 'lucide-react';

// NEW: Helper function to format numbers to 2 decimal places if they are not whole numbers
const formatNumber = (num) => {
  if (num % 1 !== 0) {
    // Check if the number has a decimal part
    return num.toFixed(2);
  }
  return num;
};

const StatCard = ({ title, value, icon, color }) => {
  // MODIFIED: Updated color classes to include dark mode variants
  const colors = {
    blue: 'bg-blue-100 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400',
    green:
      'bg-green-100 text-green-600 dark:bg-green-900/20 dark:text-green-400',
    yellow:
      'bg-yellow-100 text-yellow-600 dark:bg-yellow-900/20 dark:text-yellow-400',
  };
  return (
    // MODIFIED: Added dark mode classes for background and text
    <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md flex items-center justify-between">
      <div>
        <p className="text-sm font-medium text-gray-500 dark:text-gray-400">
          {title}
        </p>
        {/* MODIFIED: Applied the number formatting function to the value */}
        <p className="text-3xl font-bold text-gray-900 dark:text-gray-100">
          {formatNumber(value)}
        </p>
      </div>
      <div className={`${colors[color]} p-3 rounded-full`}>{icon}</div>
    </div>
  );
};

const StatsCards = ({ stats }) => (
  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
    <StatCard
      title="Total Materials"
      value={stats?.totalMaterials || 0}
      icon={<Package />}
      color="blue"
    />
    <StatCard
      title="Total Delivered"
      value={stats?.totalDelivered || 0}
      icon={<Truck />}
      color="green"
    />
    <StatCard
      title="Total Issued"
      value={stats?.totalIssued || 0}
      icon={<Send />}
      color="yellow"
    />
  </div>
);

export default StatsCards;
</file>

<file path="src/context/authContext.jsx">
// src/context/authContext.jsx
import React, { useState, useEffect, createContext, useContext } from 'react';
import { onAuthStateChanged, signOut } from 'firebase/auth';
import { doc, onSnapshot } from 'firebase/firestore';
import { auth, db } from '../firebase';

const authContext = createContext();

export const useAuth = () => useContext(authContext);

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null);
  const [appMetadata, setAppMetadata] = useState({
    categories: [],
    suppliers: [],
    materialGrades: [],
    boreSize1Options: [],
    boreSize2Options: [],
  });
  const [authLoading, setAuthLoading] = useState(true);
  const [metadataLoaded, setMetadataLoaded] = useState(false); // New state for metadata status

  const ADMIN_UID = 'liClr3tmuecp40P96GCXoHmzc6x1';
  const VIEWER_UID = 'DY1kwGWNwET1VauTFlNN0xxtH9O2';
  const authorizedUIDs = [ADMIN_UID, VIEWER_UID];

  useEffect(() => {
    const unsubscribeAuth = onAuthStateChanged(auth, (user) => {
      if (user && authorizedUIDs.includes(user.uid)) {
        const isViewer = user.uid === VIEWER_UID;
        setCurrentUser({ ...user, isViewer, isAdmin: !isViewer });
      } else {
        if (user) signOut(auth);
        setCurrentUser(null);
      }
      setAuthLoading(false);
    });

    const metadataRef = doc(db, 'app_metadata', 'lists');
    const unsubscribeMetadata = onSnapshot(
      metadataRef,
      (docSnap) => {
        if (docSnap.exists()) {
          setAppMetadata(docSnap.data());
        } else {
          console.log(
            'Metadata document does not exist! Please create it in Firestore.',
          );
        }
        setMetadataLoaded(true); // Mark metadata as loaded
      },
      (error) => {
        console.error(
          'AuthContext: Error fetching metadata! Check Firestore Rules.',
          error,
        );
        setMetadataLoaded(true); // Mark as loaded even on error to prevent infinite loading
      },
    );

    return () => {
      unsubscribeAuth();
      unsubscribeMetadata();
    };
  }, []);

  const value = {
    currentUser,
    ADMIN_UID,
    appMetadata,
  };

  // The application is considered loading until both auth and metadata are ready
  const isLoading = authLoading || !metadataLoaded;

  return (
    <authContext.Provider value={value}>
      {!isLoading && children}
    </authContext.Provider>
  );
};
</file>

<file path="src/context/LayoutContext.jsx">
import React, { createContext, useContext, useState } from 'react'; // MODIFIED: Removed useEffect

const LayoutContext = createContext();
export const useLayout = () => useContext(LayoutContext);

export const LayoutProvider = ({ children }) => {
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false);
  // MODIFIED: Removed theme state and useEffect

  const toggleSidebar = () => setIsSidebarCollapsed((prev) => !prev);

  const value = {
    isSidebarCollapsed,
    toggleSidebar,
    // MODIFIED: Removed theme and setTheme from value
  };

  return (
    <LayoutContext.Provider value={value}>{children}</LayoutContext.Provider>
  );
};
</file>

<file path="src/context/ThemeContext.jsx">
// src/contexts/ThemeContext.jsx
import React, { createContext, useContext, useEffect, useState } from 'react';

const ThemeContext = createContext();

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState(() => {
    // Initialize theme from localStorage or system preference
    if (typeof window !== 'undefined') {
      const storedTheme = localStorage.getItem('theme');
      if (storedTheme) {
        return storedTheme;
      }
      // MODIFIED: Default to 'system' if no stored theme
      return 'system';
    }
    return 'light'; // Default to light if no window object (e.g., during SSR)
  });

  useEffect(() => {
    const root = document.documentElement;
    // Remove existing theme classes to avoid conflicts
    root.classList.remove('light', 'dark');

    if (theme === 'system') {
      const prefersDarkMode = window.matchMedia(
        '(prefers-color-scheme: dark)',
      ).matches;
      root.classList.add(prefersDarkMode ? 'dark' : 'light');
    } else {
      root.classList.add(theme);
    }

    localStorage.setItem('theme', theme);
  }, [theme]);

  // Handle system theme changes if the current theme is 'system'
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const handleChange = (e) => {
      if (theme === 'system') {
        document.documentElement.classList.remove('light', 'dark'); // Ensure clean state
        document.documentElement.classList.add(e.matches ? 'dark' : 'light');
      }
    };
    mediaQuery.addEventListener('change', handleChange);
    return () => mediaQuery.removeEventListener('change', handleChange);
  }, [theme]);

  const toggleTheme = (newTheme) => {
    setTheme(newTheme);
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => useContext(ThemeContext);
</file>

<file path="src/data/mir-template.json.json">
{
    "sheet_properties": {
        "sheet_name": "17TH JUNE"
    },
    "rows": [
        {
            "row_index": 1,
            "cells": [
                {
                    "cell_address": "A1",
                    "value": "STEVE INTEGRATED TECH.",
                    "font": {
                        "name": "Calibri",
                        "size": 9.0,
                        "bold": true,
                        "italic": false,
                        "color": "#000000"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "A1:C4"
                },
                {
                    "cell_address": "D1",
                    "value": "MATERIAL RECEIVING INSPECTION REPORT",
                    "font": {
                        "name": "Times New Roman",
                        "size": 20.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "D1:J4"
                },
                {
                    "cell_address": "K1",
                    "value": "Contract No",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "L1",
                    "value": "CW60925",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "L1:M1"
                },
                {
                    "cell_address": "N1",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 10.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "N1:O4"
                }
            ]
        },
        {
            "row_index": 2,
            "cells": [
                {
                    "cell_address": "K2",
                    "value": "Sheet No.",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "L2",
                    "value": 1,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "L2:M2"
                }
            ]
        },
        {
            "row_index": 3,
            "cells": [
                {
                    "cell_address": "K3",
                    "value": "Date",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "L3",
                    "value": "2025-06-17T00:00:00",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "mm-dd-yy",
                    "merged_cells": "L3:M3"
                }
            ]
        },
        {
            "row_index": 4,
            "cells": [
                {
                    "cell_address": "K4",
                    "value": "Doc No",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "medium",
                        "top": null,
                        "bottom": null
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "L4",
                    "value": "SITSL/GBARAN/25/QMS/MIR/001",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "L4:M4"
                }
            ]
        },
        {
            "row_index": 5,
            "cells": [
                {
                    "cell_address": "A5",
                    "value": "PROJECT TITLE: GBARAN GAS CAP BLOWDOWN PROJECT PHASE 2",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "A5:O5"
                }
            ]
        },
        {
            "row_index": 6,
            "cells": [
                {
                    "cell_address": "A6",
                    "value": "CLIENT: RENAISSANCE AFRICA ENERGY COMPANY",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": null
                    },
                    "number_format": "General",
                    "merged_cells": "A6:O6"
                }
            ]
        },
        {
            "row_index": 7,
            "cells": [
                {
                    "cell_address": "A7",
                    "value": "S/NO",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "medium",
                        "bottom": null
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B7",
                    "value": "ITEM DESCRIPTION",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "medium",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B7:H7"
                },
                {
                    "cell_address": "I7",
                    "value": "UOM",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "medium",
                        "bottom": null
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J7",
                    "value": "QTY",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "medium",
                        "bottom": null
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K7",
                    "value": "Mat. Sap No",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "medium",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K7:L7"
                },
                {
                    "cell_address": "M7",
                    "value": "INSPECTION REMARK",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M7:O7"
                }
            ]
        },
        {
            "row_index": 8,
            "cells": [
                {
                    "cell_address": "A8",
                    "value": 1,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B8",
                    "value": "PIPE MET 316L 10S DN80 3\" EN10204/3.1",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B8:H8"
                },
                {
                    "cell_address": "I8",
                    "value": "metres",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J8",
                    "value": 12,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K8",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K8:L8"
                },
                {
                    "cell_address": "M8",
                    "value": "EXCELLENT CONDITION",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M8:O8"
                }
            ]
        },
        {
            "row_index": 9,
            "cells": [
                {
                    "cell_address": "A9",
                    "value": 2,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B9",
                    "value": "PIPE MET UNS S31803 160 DN150 6\"\nEN10204/3.1",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B9:H9"
                },
                {
                    "cell_address": "I9",
                    "value": "metres",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J9",
                    "value": 13.4,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K9",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K9:L9"
                },
                {
                    "cell_address": "M9",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M9:O9"
                }
            ]
        },
        {
            "row_index": 10,
            "cells": [
                {
                    "cell_address": "A10",
                    "value": 3,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B10",
                    "value": "PIPE MET UNS S31803 80S DN50 2\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B10:H10"
                },
                {
                    "cell_address": "I10",
                    "value": "metres",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J10",
                    "value": 5.81,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K10",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K10:L10"
                },
                {
                    "cell_address": "M10",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M10:O10"
                }
            ]
        },
        {
            "row_index": 11,
            "cells": [
                {
                    "cell_address": "A11",
                    "value": 4,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B11",
                    "value": "PIPE MET UNS S31803 120 DN100 4\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B11:H11"
                },
                {
                    "cell_address": "I11",
                    "value": "metres",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J11",
                    "value": 20.79,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K11",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K11:L11"
                },
                {
                    "cell_address": "M11",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M11:O11"
                }
            ]
        },
        {
            "row_index": 12,
            "cells": [
                {
                    "cell_address": "A12",
                    "value": 5,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B12",
                    "value": "PIPE MET 316L 10S DN150 6\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B12:H12"
                },
                {
                    "cell_address": "I12",
                    "value": "metres",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J12",
                    "value": 11.3,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K12",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K12:L12"
                },
                {
                    "cell_address": "M12",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M12:O12"
                }
            ]
        },
        {
            "row_index": 13,
            "cells": [
                {
                    "cell_address": "A13",
                    "value": 6,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B13",
                    "value": "PIPE MET 316L 10S DN80 3\"\nEN10204/3.1",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B13:H13"
                },
                {
                    "cell_address": "I13",
                    "value": "metres",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J13",
                    "value": 12.08,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K13",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K13:L13"
                },
                {
                    "cell_address": "M13",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M13:O13"
                }
            ]
        },
        {
            "row_index": 14,
            "cells": [
                {
                    "cell_address": "A14",
                    "value": 7,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B14",
                    "value": "Seamless pipe BE SRL 4\" XXS A106B Table Y-1 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B14:H14"
                },
                {
                    "cell_address": "I14",
                    "value": "metres",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J14",
                    "value": 12,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K14",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K14:L14"
                },
                {
                    "cell_address": "M14",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M14:O14"
                }
            ]
        },
        {
            "row_index": 15,
            "cells": [
                {
                    "cell_address": "A15",
                    "value": 8,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B15",
                    "value": "Smls elbow 90LR 6\" S160 A815 UNS S31803/1.4462 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B15:H15"
                },
                {
                    "cell_address": "I15",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J15",
                    "value": 3,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K15",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K15:L15"
                },
                {
                    "cell_address": "M15",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M15:O15"
                }
            ]
        },
        {
            "row_index": 16,
            "cells": [
                {
                    "cell_address": "A16",
                    "value": 9,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B16",
                    "value": "WN flange RF SMF 150LBS 2\" S10S A182F316/316L EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B16:H16"
                },
                {
                    "cell_address": "I16",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J16",
                    "value": 2,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K16",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K16:L16"
                },
                {
                    "cell_address": "M16",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M16:O16"
                }
            ]
        },
        {
            "row_index": 17,
            "cells": [
                {
                    "cell_address": "A17",
                    "value": 10,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B17",
                    "value": "WN flange RF SMF 1500LBS 2\" XXS A105N/A350LF2 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B17:H17"
                },
                {
                    "cell_address": "I17",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J17",
                    "value": 1,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K17",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K17:L17"
                },
                {
                    "cell_address": "M17",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M17:O17"
                }
            ]
        },
        {
            "row_index": 18,
            "cells": [
                {
                    "cell_address": "A18",
                    "value": 11,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B18",
                    "value": "WN flange RF SMF 150LBS 8\" S10S A182F316/316L EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B18:H18"
                },
                {
                    "cell_address": "I18",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J18",
                    "value": 1,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K18",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K18:L18"
                },
                {
                    "cell_address": "M18",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M18:O18"
                }
            ]
        },
        {
            "row_index": 19,
            "cells": [
                {
                    "cell_address": "A19",
                    "value": 12,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B19",
                    "value": "WN flange RF SMF 150LBS 3\" S10S A182F316/316L EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B19:H19"
                },
                {
                    "cell_address": "I19",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J19",
                    "value": 6,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K19",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K19:L19"
                },
                {
                    "cell_address": "M19",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M19:O19"
                }
            ]
        },
        {
            "row_index": 20,
            "cells": [
                {
                    "cell_address": "A20",
                    "value": 13,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B20",
                    "value": "BL flange RF SMF 150LBS 1/2\" A182F316/316L EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B20:H20"
                },
                {
                    "cell_address": "I20",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J20",
                    "value": 1,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K20",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K20:L20"
                },
                {
                    "cell_address": "M20",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M20:O20"
                }
            ]
        },
        {
            "row_index": 21,
            "cells": [
                {
                    "cell_address": "A21",
                    "value": 14,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B21",
                    "value": "BL flange RF SMF 1500LBS 4\" A182F51/1.4462 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B21:H21"
                },
                {
                    "cell_address": "I21",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J21",
                    "value": 2,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K21",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K21:L21"
                },
                {
                    "cell_address": "M21",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M21:O21"
                }
            ]
        },
        {
            "row_index": 22,
            "cells": [
                {
                    "cell_address": "A22",
                    "value": 15,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B22",
                    "value": "BL flange RF SMF 2500LBS 2\" A105N/A350LF2 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B22:H22"
                },
                {
                    "cell_address": "I22",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J22",
                    "value": 8,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K22",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K22:L22"
                },
                {
                    "cell_address": "M22",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M22:O22"
                }
            ]
        },
        {
            "row_index": 23,
            "cells": [
                {
                    "cell_address": "A23",
                    "value": 16,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B23",
                    "value": "BL flange RF SMF 2500LBS 3/4\" A105N/A350LF2 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B23:H23"
                },
                {
                    "cell_address": "I23",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J23",
                    "value": 1,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K23",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K23:L23"
                },
                {
                    "cell_address": "M23",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M23:O23"
                }
            ]
        },
        {
            "row_index": 24,
            "cells": [
                {
                    "cell_address": "A24",
                    "value": 17,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B24",
                    "value": "BL flange RF SMF 1500LBS 2\" A182F51/1.4462 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B24:H24"
                },
                {
                    "cell_address": "I24",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J24",
                    "value": 7,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K24",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K24:L24"
                },
                {
                    "cell_address": "M24",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M24:O24"
                }
            ]
        },
        {
            "row_index": 25,
            "cells": [
                {
                    "cell_address": "A25",
                    "value": 18,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B25",
                    "value": "BL flange RF SMF 2500LBS 4\" A105N/A350LF2 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B25:H25"
                },
                {
                    "cell_address": "I25",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J25",
                    "value": 5,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K25",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K25:L25"
                },
                {
                    "cell_address": "M25",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M25:O25"
                }
            ]
        },
        {
            "row_index": 26,
            "cells": [
                {
                    "cell_address": "A26",
                    "value": 19,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B26",
                    "value": "BL flange RF SMF 150LBS 1/2\" A182F316/316L EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B26:H26"
                },
                {
                    "cell_address": "I26",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J26",
                    "value": 1,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K26",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K26:L26"
                },
                {
                    "cell_address": "M26",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M26:O26"
                }
            ]
        },
        {
            "row_index": 27,
            "cells": [
                {
                    "cell_address": "A27",
                    "value": 20,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B27",
                    "value": "BL flange RF SMF 2500LBS 2\" A182F51/1.4462 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B27:H27"
                },
                {
                    "cell_address": "I27",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J27",
                    "value": 14,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K27",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K27:L27"
                },
                {
                    "cell_address": "M27",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M27:O27"
                }
            ]
        },
        {
            "row_index": 28,
            "cells": [
                {
                    "cell_address": "A28",
                    "value": 21,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B28",
                    "value": "BL flange RF SMF 1500LBS 2\" A105N/A350LF2 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B28:H28"
                },
                {
                    "cell_address": "I28",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J28",
                    "value": 4,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K28",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K28:L28"
                },
                {
                    "cell_address": "M28",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M28:O28"
                }
            ]
        },
        {
            "row_index": 29,
            "cells": [
                {
                    "cell_address": "A29",
                    "value": 22,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "B29",
                    "value": "BL flange RF SMF 1500LBS 4\" A105N/A350LF2 EN10204/3.1 ",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "left",
                        "vertical": null,
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "B29:H29"
                },
                {
                    "cell_address": "I29",
                    "value": "pcs",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": null,
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "J29",
                    "value": 5,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General"
                },
                {
                    "cell_address": "K29",
                    "value": "N/A",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "thin",
                        "right": "thin",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "K29:L29"
                },
                {
                    "cell_address": "M29",
                    "value": "\"",
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": true
                    },
                    "border": {
                        "left": "thin",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "M29:O29"
                }
            ]
        },
        {
            "row_index": 30,
            "cells": [
                {
                    "cell_address": "A30",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 11.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "fill": {
                        "pattern": "solid",
                        "color": "FFFFFFFF"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": "center",
                        "wrap_text": null
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "thin",
                        "bottom": "thin"
                    },
                    "number_format": "General",
                    "merged_cells": "A30:O30"
                }
            ]
        },
        {
            "row_index": 31,
            "cells": [
                {
                    "cell_address": "A31",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": null,
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "A31:B31"
                },
                {
                    "cell_address": "C31",
                    "value": "RECEIVED BY (STEVE INTEGRATED)",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": null,
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "C31:G31"
                },
                {
                    "cell_address": "H31",
                    "value": "WITNESSED BY (ZECH OIL)",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": null,
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "H31:K31"
                },
                {
                    "cell_address": "L31",
                    "value": "APPROVED BY (RAEC)",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": null,
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "L31:O31"
                }
            ]
        },
        {
            "row_index": 32,
            "cells": [
                {
                    "cell_address": "A32",
                    "value": "NAME:",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "A32:B32"
                },
                {
                    "cell_address": "C32",
                    "value": "VICTOR IKEH",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "C32:G32"
                },
                {
                    "cell_address": "H32",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "H32:K32"
                },
                {
                    "cell_address": "L32",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "L32:O32"
                }
            ]
        },
        {
            "row_index": 33,
            "cells": [
                {
                    "cell_address": "A33",
                    "value": "POSITION:",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "A33:B33"
                },
                {
                    "cell_address": "C33",
                    "value": "QAQC ENGINEER",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "C33:G33"
                },
                {
                    "cell_address": "H33",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "H33:K33"
                },
                {
                    "cell_address": "L33",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "L33:O33"
                }
            ]
        },
        {
            "row_index": 34,
            "cells": [
                {
                    "cell_address": "A34",
                    "value": "SIGNATURE:",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "A34:B34"
                },
                {
                    "cell_address": "C34",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "C34:G34"
                },
                {
                    "cell_address": "H34",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "H34:K34"
                },
                {
                    "cell_address": "L34",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "L34:O34"
                }
            ]
        },
        {
            "row_index": 35,
            "cells": [
                {
                    "cell_address": "A35",
                    "value": "DATE:",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": true,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "A35:B35"
                },
                {
                    "cell_address": "C35",
                    "value": "2025-06-17T00:00:00",
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "mm-dd-yy",
                    "merged_cells": "C35:G35"
                },
                {
                    "cell_address": "H35",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": "center",
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "H35:K35"
                },
                {
                    "cell_address": "L35",
                    "value": null,
                    "font": {
                        "name": "Calibri",
                        "size": 12.0,
                        "bold": false,
                        "italic": false,
                        "color": "Values must be of type <class 'str'>"
                    },
                    "alignment": {
                        "horizontal": null,
                        "vertical": null,
                        "wrap_text": true
                    },
                    "border": {
                        "left": "medium",
                        "right": "medium",
                        "top": "medium",
                        "bottom": "medium"
                    },
                    "number_format": "General",
                    "merged_cells": "L35:O35"
                }
            ]
        }
    ]
}
</file>

<file path="src/firebase.js">
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

const requiredEnvVars = [
  'VITE_FIREBASE_API_KEY',
  'VITE_FIREBASE_AUTH_DOMAIN',
  'VITE_FIREBASE_PROJECT_ID',
  'VITE_FIREBASE_STORAGE_BUCKET',
  'VITE_FIREBASE_MESSAGING_SENDER_ID',
  'VITE_FIREBASE_APP_ID',
];

for (const varName of requiredEnvVars) {
  if (!import.meta.env[varName]) {
    throw new Error(`Configuration Error: Missing required environment variable ${varName}`);
  }
}

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
};

const app = initializeApp(firebaseConfig);
export const auth = getAuth(app);
export const db = getFirestore(app);
</file>

<file path="src/index.css">
@import url("https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700;800&display=swap");
@import "tailwindcss";

@custom-variant dark (&:where(.dark, .dark *));

body {
  font-family: "Montserrat", sans-serif;
}
@keyframes spreadFade {
  0% {
    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.6);
  }
  70% {
    box-shadow: 0 0 20px 15px rgba(59, 130, 246, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba(59, 130, 246, 0);
  }
}

.glow {
  animation: spreadFade 2s infinite ease-out;
}

/* --- NEW: THEME-AWARE SCROLLBAR STYLES --- */
@layer utilities {
  /* For modern browsers like Chrome, Edge, and Safari */
  *::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }

  *::-webkit-scrollbar-track {
    /* This makes the track background transparent as requested */
    background: transparent;
  }

  *::-webkit-scrollbar-thumb {
    /* Default light-mode thumb color */
    @apply bg-slate-300;
    border-radius: 10px;
    border: 2px solid transparent;
    background-clip: content-box;
  }

  *::-webkit-scrollbar-thumb:hover {
    /* A slightly darker color on hover for better affordance */
    @apply bg-slate-400;
  }

  /* --- Dark Mode Styles for Webkit --- */
  .dark *::-webkit-scrollbar-thumb {
    /* Dark mode thumb color */
    @apply bg-slate-600;
  }

  .dark *::-webkit-scrollbar-thumb:hover {
    /* A slightly lighter color on hover for dark mode */
    @apply bg-slate-500;
  }

  /* --- Fallback for Firefox --- */
  * {
    /* Defines a thin scrollbar and sets the thumb/track colors */
    scrollbar-width: thin;
    scrollbar-color: theme('colors.slate.300') transparent;
  }

  .dark * {
     /* Defines Firefox scrollbar colors for dark mode */
    scrollbar-color: theme('colors.slate.600') transparent;
  }
}
</file>

<file path="src/layouts/MainLayout.jsx">
import React from 'react';
import { Outlet } from 'react-router-dom';
import Sidebar from '../components/Sidebar';
import Header from '../components/Header';
import { useLayout } from '../context/LayoutContext';
import { ChevronsLeft } from 'lucide-react';
import clsx from 'clsx';

const MainLayout = () => {
  const { isSidebarCollapsed, toggleSidebar } = useLayout();

  return (
    // MODIFIED: Updated background to be theme-responsive
    <div className="relative h-screen bg-white dark:bg-gray-900">
      <div
        className={`grid h-full transition-all duration-300 ${
          isSidebarCollapsed ? 'grid-cols-[60px_1fr]' : 'grid-cols-[256px_1fr]'
        }`}
      >
        <Sidebar />
        <div className="flex-1 flex flex-col overflow-hidden">
          <Header />
          <main className="flex-1 overflow-x-hidden overflow-y-auto p-4 md:p-8">
            <Outlet />
          </main>
        </div>
      </div>

      {/* MODIFIED: Added -translate-x-1/2 to perfectly center the button on the border */}
      <div
        className={clsx(
          'absolute top-[15%] -translate-y-1/2 rounded-full flex items-center justify-center transition-all duration-300 ease-in-out z-30 -translate-x-1/2 bg-white dark:bg-gray-800 opacity-90',
          isSidebarCollapsed ? 'left-[60px]' : 'left-[256px]',
          'glow',
        )}
      >
        <button
          onClick={toggleSidebar}
          title={isSidebarCollapsed ? 'Expand Menu' : 'Collapse Menu'}
          className="w-full h-full flex items-center justify-center text-gray-600 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-500 "
        >
          <ChevronsLeft
            size={20}
            className={clsx(
              'transition-transform duration-300 ease-in-out',
              isSidebarCollapsed && 'rotate-180',
            )}
          />
        </button>
      </div>
    </div>
  );
};

export default MainLayout;
</file>

<file path="src/main.jsx">
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { Toaster } from 'react-hot-toast'; // NEW: Import Toaster
import App from './App.jsx';
import './index.css';
import { ThemeProvider } from './context/ThemeContext.jsx'; // NEW: Import ThemeProvider

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <BrowserRouter>
      <ThemeProvider>
        {' '}
        {/* NEW: Wrap App with ThemeProvider */}
        <App />
      </ThemeProvider>
      <Toaster position="top-right" reverseOrder={false} />{' '}
      {/* NEW: Add Toaster component */}
    </BrowserRouter>
  </React.StrictMode>,
);
</file>

<file path="src/pages/LogPage.jsx">
// src/pages/LogPage.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { useAuth } from '../context/authContext';
import { db } from '../firebase';
import {
  collection,
  query,
  onSnapshot,
  orderBy,
  where,
  getDocs,
  Timestamp,
} from 'firebase/firestore';
import toast from 'react-hot-toast';
import Papa from 'papaparse';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import LogForm from '../components/LogForm';
import LogTable from '../components/LogTable';
import Pagination from '../components/Pagination';
import {
  Download,
  Upload,
  FileDown,
  Plus,
  Search,
  X,
  Printer,
} from 'lucide-react';
import { exportToMir } from '../utils/exportToMir';
import DatePickerModal from '../components/DatePickerModal'; // NEW: Import the modal

const ITEMS_PER_PAGE = 10;

const LogPage = ({ type }) => {
  const { currentUser, appMetadata, ADMIN_UID } = useAuth();
  const [allLogs, setAllLogs] = useState([]);
  const [allMaterials, setAllMaterials] = useState([]);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [editingLog, setEditingLog] = useState(null);

  const [uniqueDates, setUniqueDates] = useState([]);
  const [selectedDate, setSelectedDate] = useState('all');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedSupplier, setSelectedSupplier] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);

  // NEW: State to control the date picker modal
  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);

  const config = useMemo(
    () => ({
      delivery: {
        title: 'Delivery Log',
        collectionName: 'delivery_logs',
        icon: <Download className="h-8 w-8 text-blue-600" />,
      },
      issuance: {
        title: 'Issuance Log',
        collectionName: 'issuance_logs',
        icon: <Upload className="h-8 w-8 text-red-600" />,
      },
    }),
    [],
  );

  const currentConfig = config[type];

  useEffect(() => {
    const materialsRef = collection(db, `materials/${ADMIN_UID}/items`);
    const unsubscribe = onSnapshot(materialsRef, (snapshot) => {
      const materialsList = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setAllMaterials(materialsList);
    });
    return () => unsubscribe();
  }, [ADMIN_UID]);

  useEffect(() => {
    // This effect now fetches all logs and also populates the unique dates for the new modal
    if (!currentUser) return;
    const logCollectionRef = collection(db, currentConfig.collectionName);
    const q = query(logCollectionRef, orderBy('date', 'desc'));

    const unsubscribe = onSnapshot(
      q,
      (snapshot) => {
        const logs = snapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }));
        setAllLogs(logs);

        // Also extract unique dates from all logs for the picker
        const dates = logs.map((log) => {
          if (log.date?.toDate) {
            return log.date.toDate().toISOString().split('T')[0];
          }
          return null;
        });
        setUniqueDates(
          [...new Set(dates.filter(Boolean))].sort(
            (a, b) => new Date(b) - new Date(a),
          ),
        );
      },
      (error) => {
        console.error('Firestore Query Error:', error);
        toast.error(`Failed to fetch ${type} logs. Check console for details.`);
      },
    );

    return () => unsubscribe();
  }, [currentUser, currentConfig.collectionName, type]);

  const filteredLogs = useMemo(() => {
    let logsToFilter = [...allLogs];

    // Apply date range filters
    if (selectedDate === 'custom' && startDate && endDate) {
      const start = new Date(startDate).getTime();
      const end = new Date(endDate + 'T23:59:59').getTime();
      logsToFilter = logsToFilter.filter((log) => {
        const logTime = log.date?.toDate().getTime();
        return logTime >= start && logTime <= end;
      });
    } else if (selectedDate !== 'all' && selectedDate !== 'custom') {
      logsToFilter = logsToFilter.filter((log) => {
        const logDateStr = log.date?.toDate().toISOString().split('T')[0];
        return logDateStr === selectedDate;
      });
    }

    // Apply category and supplier filters
    logsToFilter = logsToFilter.filter((log) => {
      const categoryMatch =
        selectedCategory === 'all' ||
        (log.category || '').toLowerCase().trim() ===
          selectedCategory.toLowerCase().trim();
      const supplierMatch =
        selectedSupplier === 'all' ||
        (log.supplier || '').toLowerCase().trim() ===
          selectedSupplier.toLowerCase().trim();
      return categoryMatch && supplierMatch;
    });

    return logsToFilter;
  }, [allLogs, selectedCategory, selectedSupplier, selectedDate, startDate, endDate]);

  const searchedLogs = useMemo(() => {
    if (!searchTerm) return filteredLogs;
    const searchKeywords = searchTerm
      .toLowerCase()
      .split(' ')
      .filter((kw) => kw.trim() !== '');
    return filteredLogs.filter((log) => {
      const descriptionText = (log.materialDescription || '').toLowerCase();
      return searchKeywords.every((kw) => descriptionText.includes(kw));
    });
  }, [filteredLogs, searchTerm]);

  const paginatedLogs = useMemo(() => {
    const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
    return searchedLogs.slice(startIndex, startIndex + ITEMS_PER_PAGE);
  }, [searchedLogs, currentPage]);

  const totalPages = Math.ceil(searchedLogs.length / ITEMS_PER_PAGE);

  const handleOpenForm = (log = null) => {
    setEditingLog(log);
    setIsFormOpen(true);
  };
  const handleCloseForm = () => {
    setEditingLog(null);
    setIsFormOpen(false);
  };

  const handleExport = (format) => {
    if (searchedLogs.length === 0) {
      toast.error('No logs to export.');
      return;
    }
    const dataToExport = searchedLogs.map((log) => {
      const date = log.date?.toDate
        ? log.date.toDate().toLocaleDateString()
        : log.date;
      return {
        Date: date,
        Material: log.materialDescription,
        Supplier: log.supplier || 'N/A',
        Grade: log.materialGrade,
        'Bore 1': log.boreSize1,
        'Bore 2': log.boreSize2 || 'N/A',
        Quantity: log.quantity,
        Remarks: log.remarks || 'N/A',
      };
    });
    const filename = `${type}_log_${new Date().toISOString().split('T')[0]}`;
    if (format === 'csv') {
      const csv = Papa.unparse(dataToExport);
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.setAttribute('download', `${filename}.csv`);
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } else if (format === 'pdf') {
      const doc = new jsPDF();
      doc.text(`${currentConfig.title} Report`, 14, 16);
      doc.autoTable({
        head: [Object.keys(dataToExport[0])],
        body: dataToExport.map((row) => Object.values(row)),
        startY: 25,
        styles: { fontSize: 8 },
      });
      doc.save(`${filename}.pdf`);
    }
  };
  
  // NEW: This function handles the export after a date is selected from the modal
  const handleExportByDate = (date) => {
    setIsDatePickerOpen(false); // Close the modal

    if (!date) {
      toast.error('No date was selected.');
      return;
    }

    // Filter all logs to get only the ones for the selected date
    const logsForDate = allLogs.filter((log) => {
      const logDate = log.date?.toDate
        ? log.date.toDate().toISOString().split('T')[0]
        : null;
      return logDate === date;
    });

    if (logsForDate.length === 0) {
      toast.error(`No delivery logs found for ${date}.`);
      return;
    }
    
    // Prepare details for the report header
    const reportDetails = {
      sheetNo: 1,
      date: date,
      docNo: `SITSL/GBARAN/25/QMS/MIR/001`,
      receivedBy: {
          name: 'VICTOR IKEH',
          position: 'QAQC ENGINEER'
      }
    };
    
    toast.success(`Exporting ${logsForDate.length} logs for ${date}...`);
    exportToMir(logsForDate, reportDetails);
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center flex-wrap gap-4">
        <div className="flex items-center gap-4">
          <div className="p-2 bg-white dark:bg-gray-800 rounded-lg shadow">
            {currentConfig.icon}
          </div>
          <h1 className="text-3xl font-bold text-gray-800 dark:text-gray-200">
            {currentConfig.title}
          </h1>
        </div>
        {!currentUser.isViewer && (
          <button
            onClick={() => handleOpenForm()}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2"
          >
            <Plus size={16} />
            <span>Add New {type}</span>
          </button>
        )}
      </div>

      <div className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow-md space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div>
            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
              Filter by Category
            </label>
            <select
              value={selectedCategory}
              onChange={(e) => setSelectedCategory(e.target.value)}
              className="w-full h-10 px-2 mt-1 border border-gray-300 rounded-md shadow-sm bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            >
              <option value="all">All Categories</option>
              {appMetadata.categories?.sort().map((cat) => (
                <option key={cat} value={cat}>
                  {cat}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
              Filter by Supplier
            </label>
            <select
              value={selectedSupplier}
              onChange={(e) => setSelectedSupplier(e.target.value)}
              className="w-full h-10 px-2 mt-1 border border-gray-300 rounded-md shadow-sm bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            >
              <option value="all">All Suppliers</option>
              {appMetadata.suppliers?.sort().map((sup) => (
                <option key={sup} value={sup}>
                  {sup}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
              Filter by Date
            </label>
            <select
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
              className="w-full h-10 px-2 mt-1 border border-gray-300 rounded-md shadow-sm bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            >
              <option value="all">All Dates</option>
              <option value="custom">Custom Range</option>
              {uniqueDates.map((date, index) => (
                <option key={`${date}-${index}`} value={date}>
                  {date}
                </option>
              ))}
            </select>
          </div>
          {selectedDate === 'custom' && (
            <>
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  Start Date
                </label>
                <input
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="w-full h-10 px-2 mt-1 border rounded-md bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                />
              </div>
              <div>
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  End Date
                </label>
                <input
                  type="date"
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  className="w-full h-10 px-2 mt-1 border rounded-md bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                />
              </div>
            </>
          )}
          <div className="lg:col-start-4">
            <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
              Search Material
            </label>
            <div className="relative mt-1">
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => {
                  setSearchTerm(e.target.value);
                  setCurrentPage(1);
                }}
                placeholder="Search descriptions..."
                className="pl-10 pr-10 w-full h-10 border rounded-lg bg-white dark:bg-gray-700 dark:border-gray-600 dark:text-white"
              />
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              {searchTerm && (
                <button
                  onClick={() => setSearchTerm('')}
                  className="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                >
                  <X className="h-5 w-5" />
                </button>
              )}
            </div>
          </div>
        </div>
        <div className="flex items-center gap-2 pt-4 border-t border-gray-200 dark:border-gray-700">
          <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Export:
          </span>
          <button
            onClick={() => handleExport('csv')}
            disabled={searchedLogs.length === 0}
            className="flex items-center gap-2 px-4 py-2 text-sm bg-green-100 text-green-800 rounded-md hover:bg-green-200 disabled:opacity-50"
            title="Export current view to CSV"
          >
            <FileDown size={16} /> CSV
          </button>
          <button
            onClick={() => handleExport('pdf')}
            disabled={searchedLogs.length === 0}
            className="flex items-center gap-2 px-4 py-2 text-sm bg-red-100 text-red-800 rounded-md hover:bg-red-200 disabled:opacity-50"
            title="Export current view to PDF"
          >
            <FileDown size={16} /> PDF
          </button>
          {/* MODIFIED: The MIR button now opens the modal */}
          {type === 'delivery' && (
            <button
              onClick={() => setIsDatePickerOpen(true)}
              className="flex items-center gap-2 px-4 py-2 text-sm bg-blue-100 text-blue-800 rounded-md hover:bg-blue-200"
              title="Export MIR for a Specific Date"
            >
              <Printer size={16} /> MIR
            </button>
          )}
        </div>
      </div>

      <LogTable
        logs={paginatedLogs}
        type={type}
        onEdit={handleOpenForm}
        currentPage={currentPage}
        itemsPerPage={ITEMS_PER_PAGE}
        allMaterials={allMaterials}
      />
      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        onPageChange={setCurrentPage}
      />
      {isFormOpen && (
        <LogForm
          type={type}
          log={editingLog}
          onClose={handleCloseForm}
          allMaterials={allMaterials}
        />
      )}
      
      {/* NEW: Render the modal conditionally at the end of the component */}
      {isDatePickerOpen && (
        <DatePickerModal
          isOpen={isDatePickerOpen}
          onClose={() => setIsDatePickerOpen(false)}
          onExport={handleExportByDate}
          availableDates={uniqueDates}
        />
      )}
    </div>
  );
};

export default LogPage;
</file>

<file path="src/pages/MaterialListPage.jsx">
import React from 'react';
import { useParams, useLocation } from 'react-router-dom';
import MaterialTable from '../components/MaterialTable';

const MaterialListPage = ({ statusFilter }) => {
  const params = useParams();
  const location = useLocation();

  const filterKey = location.pathname.split('/')[1] || null;
  const filterValue = params.filterValue
    ? decodeURIComponent(params.filterValue)
    : null;

  // MODIFIED: Determine the viewType to pass to the table
  const viewType =
    statusFilter ||
    (location.pathname === '/balanced-materials' ? 'balanced' : 'default');

  return (
    <div>
      <MaterialTable
        filterKey={filterKey}
        filterValue={filterValue}
        statusFilter={statusFilter}
        viewType={viewType}
      />
    </div>
  );
};

export default MaterialListPage;
</file>

<file path="src/setupTests.js">
import '@testing-library/jest-dom';

// NEW: Add a global mock for ResizeObserver to prevent errors in JSDOM
const ResizeObserver = jest.fn(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn(),
}));

window.ResizeObserver = ResizeObserver;
</file>

<file path="src/ui/Button.jsx">
import React from 'react';
import { LoaderCircle } from 'lucide-react';
import clsx from 'clsx';

const Button = ({
  children,
  variant = 'primary',
  isLoading = false,
  disabled = false,
  className,
  ...props
}) => {
  const baseClasses = 'flex items-center justify-center w-full px-6 py-3 text-sm font-semibold rounded-lg shadow-md transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2';

  const variantClasses = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
    secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300 dark:bg-gray-600 dark:text-gray-200 dark:hover:bg-gray-500 focus:ring-gray-400',
    danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
    yellow: 'bg-[#FDE047] text-[#1E3A8A] font-bold py-3 rounded-full text-lg hover:bg-[#FACC15] focus:ring-yellow-400'
  };

  const disabledClasses = 'opacity-50 cursor-not-allowed';

  return (
    <button
      disabled={disabled || isLoading}
      className={clsx(
        baseClasses,
        variantClasses[variant],
        (disabled || isLoading) && disabledClasses,
        className
      )}
      {...props}
    >
      {isLoading ? (
        <>
          <LoaderCircle className="animate-spin mr-2 h-5 w-5" />
          <span>Processing...</span>
        </>
      ) : (
        children
      )}
    </button>
  );
};

export default Button;
</file>

<file path="src/ui/Button.stories.jsx">
import React from 'react';
import Button from './Button';

export default {
  title: 'UI/Button',
  component: Button,
  argTypes: {
    children: { control: 'text' },
    variant: {
      control: { type: 'select' },
      options: ['primary', 'secondary', 'danger', 'yellow'],
    },
    isLoading: { control: 'boolean' },
    disabled: { control: 'boolean' },
  },
};

const Template = (args) => <Button {...args} />;

export const Primary = Template.bind({});
Primary.args = {
  children: 'Primary Button',
  variant: 'primary',
};

export const Secondary = Template.bind({});
Secondary.args = {
  children: 'Secondary Button',
  variant: 'secondary',
};

export const Danger = Template.bind({});
Danger.args = {
  children: 'Danger Button',
  variant: 'danger',
};

export const Yellow = Template.bind({});
Yellow.args = {
  children: 'Yellow Button',
  variant: 'yellow',
  className: 'max-w-xs'
};

export const IsLoading = Template.bind({});
IsLoading.args = {
  children: 'Will not show',
  variant: 'primary',
  isLoading: true,
};

export const Disabled = Template.bind({});
Disabled.args = {
  children: 'Disabled Button',
  variant: 'primary',
  disabled: true,
};
</file>

<file path="src/utils/exportToMir.js">
// src/utils/exportToMir.js
import ExcelJS from 'exceljs';
import { saveAs } from 'file-saver';
import mirTemplate from '../data/mir-template.json';

// Helper to fetch images from the public folder or a URL
const getImageAsBase64 = async (url) => {
  try {
    const response = await fetch(url);
    const blob = await response.blob();
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result.split(',')[1]);
      reader.onerror = reject;
      reader.readAsDataURL(blob);
    });
  } catch (error) {
    console.error(`Failed to fetch image at URL: ${url}`, error);
    return null;
  }
};

// Helper to format the border style object for ExcelJS
const getBorderStyle = (styleName) => {
  if (!styleName) return undefined;
  return { style: styleName };
};

// Main export function with the new dynamic logic
export const exportToMir = async (deliveryLogs, reportDetails) => {
  const workbook = new ExcelJS.Workbook();
  const worksheet = workbook.addWorksheet(mirTemplate.sheet_properties.sheet_name || 'MIR');

  // --- 1. Isolate Template Sections ---
  const headerRows = mirTemplate.rows.filter(r => r.row_index <= 7);
  const dataRowTemplate = mirTemplate.rows.find(r => r.row_index === 8); // For style reference
  const blankRowTemplate = mirTemplate.rows.find(r => r.row_index === 30); // For style reference
  const footerRows = mirTemplate.rows.filter(r => r.row_index >= 31);

  // --- 2. Build Static Header (Rows 1-7) ---
  headerRows.forEach(rowData => {
    // Apply merges first
    if (rowData.cells) {
      rowData.cells.forEach(cellData => {
        if (cellData.merged_cells) {
          worksheet.mergeCells(cellData.merged_cells);
        }
      });
    }
    // Then apply values and styles
    if (rowData.cells) {
      rowData.cells.forEach(cellData => {
        const cell = worksheet.getCell(cellData.cell_address);
        cell.value = cellData.value;
        // Apply styles... (font, alignment, border, etc.)
        cell.font = { name: cellData.font.name || 'Calibri', size: cellData.font.size || 11, bold: cellData.font.bold || false, color: { argb: (cellData.font.color && cellData.font.color.startsWith('#')) ? `FF${cellData.font.color.substring(1)}` : 'FF000000' } };
        cell.alignment = { horizontal: cellData.alignment.horizontal || 'left', vertical: cellData.alignment.vertical || 'center', wrapText: cellData.alignment.wrap_text || false, };
        cell.border = { top: getBorderStyle(cellData.border.top), left: getBorderStyle(cellData.border.left), bottom: getBorderStyle(cellData.border.bottom), right: getBorderStyle(cellData.border.right), };
        if (cellData.number_format && cellData.number_format !== 'General') { cell.numFmt = cellData.number_format; }
      });
    }
  });
  // Overwrite dynamic header values
  worksheet.getCell('L2').value = reportDetails.sheetNo || 1;
  worksheet.getCell('L3').value = new Date(reportDetails.date || new Date());
  worksheet.getCell('L4').value = reportDetails.docNo || 'SITSL/GBARAN/25/QMS/MIR/001';


  // --- 3. Build Dynamic Data Section ---
  const dataRowStartIndex = 8;
  const logsCount = deliveryLogs.length;

  if (logsCount > 0) {
    deliveryLogs.forEach((log, index) => {
      const rowNumber = dataRowStartIndex + index;
      const row = worksheet.getRow(rowNumber);
      
      // Set values
      row.getCell('A').value = index + 1;
      row.getCell('B').value = log.materialDescription;
      row.getCell('I').value = log.category?.toLowerCase() === 'pipes' ? 'metres' : 'pcs';
      row.getCell('J').value = log.quantity;
      row.getCell('K').value = 'N/A';
      row.getCell('M').value = log.remarks || 'EXCELLENT CONDITION';

      // Apply merges for this specific row
      worksheet.mergeCells(`B${rowNumber}:H${rowNumber}`);
      worksheet.mergeCells(`K${rowNumber}:L${rowNumber}`);
      worksheet.mergeCells(`M${rowNumber}:O${rowNumber}`);

      // Apply styles using the template as a reference
      row.eachCell({ includeEmpty: true }, cell => {
        cell.font = { name: 'Calibri', size: 11 };
        cell.alignment = { horizontal: 'center', vertical: 'center', wrapText: true };
        cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' }, };
      });
      // Style overrides
      row.getCell('B').alignment.horizontal = 'left';
      row.getCell('A').border.left = { style: 'medium' };
      row.getCell('O').border.right = { style: 'medium' };
    });
  }

  // --- 4. Build Dynamic Footer ---
  const lastDataRowIndex = dataRowStartIndex + logsCount - 1;
  const footerStartIndex = lastDataRowIndex + 2; // +1 for blank row, +1 to start footer

  // Add a blank row with border style
  const blankRowIndex = footerStartIndex - 1;
  worksheet.mergeCells(`A${blankRowIndex}:O${blankRowIndex}`);
  const blankCell = worksheet.getCell(`A${blankRowIndex}`);
  blankCell.style = {
      border: { top: { style: 'thin' }, bottom: { style: 'thin' }, left: { style: 'medium' }, right: { style: 'medium' } }
  };
  
  // Create footer rows at the new dynamic position
  footerRows.forEach(footerRowData => {
    const newRowIndex = footerStartIndex + (footerRowData.row_index - 31);
    const newRow = worksheet.getRow(newRowIndex);

    if (footerRowData.cells) {
      // Apply merges first, updating the row index in the range string
      footerRowData.cells.forEach(cellData => {
         if (cellData.merged_cells) {
             const newRange = cellData.merged_cells.replace(/\d+/g, newRowIndex);
             worksheet.mergeCells(newRange);
         }
      });
      // Then apply values and styles
      footerRowData.cells.forEach(cellData => {
          const colLetter = cellData.cell_address.match(/[A-Z]+/)[0];
          const cell = newRow.getCell(colLetter);
          // Apply styles...
          cell.value = cellData.value;
          cell.font = { name: cellData.font.name || 'Calibri', size: cellData.font.size || 11, bold: cellData.font.bold || false, color: { argb: (cellData.font.color && cellData.font.color.startsWith('#')) ? `FF${cellData.font.color.substring(1)}` : 'FF000000' } };
          cell.alignment = { horizontal: cellData.alignment.horizontal || 'left', vertical: cellData.alignment.vertical || 'center', wrapText: cellData.alignment.wrap_text || false, };
          cell.border = { top: getBorderStyle(cellData.border.top), left: getBorderStyle(cellData.border.left), bottom: getBorderStyle(cellData.border.bottom), right: getBorderStyle(cellData.border.right), };
      });
    }
  });

  // Overwrite dynamic footer values
  const receivedByNameCell = worksheet.getCell(`C${footerStartIndex + 1}`);
  receivedByNameCell.value = reportDetails.receivedBy?.name || 'VICTOR IKEH';
  const receivedByPosCell = worksheet.getCell(`C${footerStartIndex + 2}`);
  receivedByPosCell.value = reportDetails.receivedBy?.position || 'QAQC ENGINEER';
  const receivedByDateCell = worksheet.getCell(`C${footerStartIndex + 4}`);
  receivedByDateCell.value = new Date(reportDetails.date || new Date());
  receivedByDateCell.numFmt = 'mm-dd-yy';


  // --- 5. Add Images Dynamically ---
  worksheet.getCell('A1').value = null;
  worksheet.getCell('N1').value = null;

  const imageUrls = {
    companyLogo: '/images/steve-logo.png',
    clientLogo: '/images/renaissance-logo.jpg',
    signature: '/images/signature.png'
  };

  const [companyLogoB64, clientLogoB64, signatureB64] = await Promise.all([
    getImageAsBase64(imageUrls.companyLogo),
    getImageAsBase64(imageUrls.clientLogo),
    getImageAsBase64(imageUrls.signature)
  ]);

  if(companyLogoB64) {
    const companyLogoId = workbook.addImage({ base64: companyLogoB64, extension: 'png' });
    worksheet.addImage(companyLogoId, 'A1:C4');
  }
  if(clientLogoB64) {
    const clientLogoId = workbook.addImage({ base64: clientLogoB64, extension: 'jpeg' });
    worksheet.addImage(clientLogoId, 'N1:O4');
  }
  if(signatureB64) {
    // Place signature in its new dynamic position
    const signatureRow = footerStartIndex + 3; // 3 rows down from footer start
    worksheet.getCell(`C${signatureRow}`).value = null; // Clear placeholder
    const signatureId = workbook.addImage({ base64: signatureB64, extension: 'png' });
    worksheet.addImage(signatureId, `C${signatureRow}:G${signatureRow}`);
  }

  // --- 6. Set Column Widths ---
  worksheet.getColumn('A').width = 5;
  worksheet.getColumn('B').width = 15;
  worksheet.getColumn('C').width = 10;
  worksheet.getColumn('D').width = 10;
  worksheet.getColumn('E').width = 10;
  worksheet.getColumn('F').width = 10;
  worksheet.getColumn('G').width = 10;
  worksheet.getColumn('H').width = 10;
  worksheet.getColumn('I').width = 8;
  worksheet.getColumn('J').width = 8;
  worksheet.getColumn('K').width = 10;
  worksheet.getColumn('L').width = 10;
  worksheet.getColumn('M').width = 12;
  worksheet.getColumn('N').width = 12;
  worksheet.getColumn('O').width = 12;

  // --- 7. Generate and Download File ---
  const buffer = await workbook.xlsx.writeBuffer();
  const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.sheet' });
  saveAs(blob, `MIR_Report_${reportDetails.date || 'export'}.xlsx`);
};
</file>

<file path="tailwind.config.js">
// tailwind.config.js
export default {
  darkMode: 'selector', // <--- THIS IS THE KEY
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  theme: {
    extend: {
      fontFamily: {
        montserrat: ['Montserrat', 'sans-serif'],
      },
      colors: {
        'brand-blue': '#004aad',
        'brand-yellow': '#fdfe13',
      },
    },
  },
  plugins: [],
};
</file>

<file path="vite.config.js">
// vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import tailwindcss from '@tailwindcss/vite';

// This is the entire corrected file content.
export default defineConfig({
  plugins: [
    react(),
    // The plugin will now automatically find and use your tailwind.config.js
    tailwindcss(),
  ],
});
</file>

</files>
